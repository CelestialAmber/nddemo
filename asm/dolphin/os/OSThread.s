.include "macros.inc"

.section .text, "ax"  # 0x800065A0 - 0x80063CE0 ; 0x0005D740

.fn __OSThreadInit, global
/* 8002E438 0002A3B8  7C 08 02 A6 */	mflr r0
/* 8002E43C 0002A3BC  3C 60 80 08 */	lis r3, RunQueue@ha
/* 8002E440 0002A3C0  90 01 00 04 */	stw r0, 0x4(r1)
/* 8002E444 0002A3C4  38 00 00 02 */	li r0, 0x2
/* 8002E448 0002A3C8  38 80 00 10 */	li r4, 0x10
/* 8002E44C 0002A3CC  94 21 FF E0 */	stwu r1, -0x20(r1)
/* 8002E450 0002A3D0  BF 41 00 08 */	stmw r26, 0x8(r1)
/* 8002E454 0002A3D4  3B 83 03 28 */	addi r28, r3, RunQueue@l
/* 8002E458 0002A3D8  3B FC 04 10 */	addi r31, r28, 0x410
/* 8002E45C 0002A3DC  3B A0 00 00 */	li r29, 0x0
/* 8002E460 0002A3E0  38 7F 02 E8 */	addi r3, r31, 0x2e8
/* 8002E464 0002A3E4  B0 1C 06 D8 */	sth r0, 0x6d8(r28)
/* 8002E468 0002A3E8  38 00 00 01 */	li r0, 0x1
/* 8002E46C 0002A3EC  B0 1C 06 DA */	sth r0, 0x6da(r28)
/* 8002E470 0002A3F0  38 00 FF FF */	li r0, -0x1
/* 8002E474 0002A3F4  90 9C 06 E4 */	stw r4, 0x6e4(r28)
/* 8002E478 0002A3F8  90 9C 06 E0 */	stw r4, 0x6e0(r28)
/* 8002E47C 0002A3FC  93 BC 06 DC */	stw r29, 0x6dc(r28)
/* 8002E480 0002A400  90 1C 06 E8 */	stw r0, 0x6e8(r28)
/* 8002E484 0002A404  93 BC 07 00 */	stw r29, 0x700(r28)
/* 8002E488 0002A408  48 00 00 D9 */	bl OSInitThreadQueue
/* 8002E48C 0002A40C  93 BC 07 08 */	stw r29, 0x708(r28)
/* 8002E490 0002A410  3F C0 80 00 */	lis r30, 0x800000D8@ha
/* 8002E494 0002A414  38 7F 00 00 */	addi r3, r31, 0x0
/* 8002E498 0002A418  93 BC 07 04 */	stw r29, 0x704(r28)
/* 8002E49C 0002A41C  93 FE 00 D8 */	stw r31, 0x800000D8@l(r30)
/* 8002E4A0 0002A420  4B FF B2 F1 */	bl OSClearContext
/* 8002E4A4 0002A424  7F E3 FB 78 */	mr r3, r31
/* 8002E4A8 0002A428  4B FF B1 21 */	bl OSSetCurrentContext
/* 8002E4AC 0002A42C  3C 60 80 0C */	lis r3, _stack_addr@ha
/* 8002E4B0 0002A430  38 03 9B 98 */	addi r0, r3, _stack_addr@l
/* 8002E4B4 0002A434  3C 60 80 0B */	lis r3, _stack_end@ha
/* 8002E4B8 0002A438  90 1C 07 14 */	stw r0, 0x714(r28)
/* 8002E4BC 0002A43C  38 03 9B 98 */	addi r0, r3, _stack_end@l
/* 8002E4C0 0002A440  38 7C 07 18 */	addi r3, r28, 0x718
/* 8002E4C4 0002A444  90 1C 07 18 */	stw r0, 0x718(r28)
/* 8002E4C8 0002A448  3C 80 DE AE */	lis r4, 0xDEADBABE@ha
/* 8002E4CC 0002A44C  3B 40 00 00 */	li r26, 0x0
/* 8002E4D0 0002A450  80 63 00 00 */	lwz r3, 0x0(r3)
/* 8002E4D4 0002A454  38 84 BA BE */	addi r4, r4, 0xDEADBABE@l
/* 8002E4D8 0002A458  57 40 18 38 */	slwi r0, r26, 3
/* 8002E4DC 0002A45C  90 83 00 00 */	stw r4, 0x0(r3)
/* 8002E4E0 0002A460  7F 7C 02 14 */	add r27, r28, r0
/* 8002E4E4 0002A464  93 AD 84 D8 */	stw r29, RunQueueBits@sda21(r13)
/* 8002E4E8 0002A468  93 FE 00 E4 */	stw r31, 0xe4(r30)
/* 8002E4EC 0002A46C  93 AD 84 DC */	stw r29, RunQueueHint@sda21(r13)
.L_8002E4F0:
/* 8002E4F0 0002A470  7F 63 DB 78 */	mr r3, r27
/* 8002E4F4 0002A474  48 00 00 6D */	bl OSInitThreadQueue
/* 8002E4F8 0002A478  3B 5A 00 01 */	addi r26, r26, 0x1
/* 8002E4FC 0002A47C  2C 1A 00 1F */	cmpwi r26, 0x1f
/* 8002E500 0002A480  3B 7B 00 08 */	addi r27, r27, 0x8
/* 8002E504 0002A484  40 81 FF EC */	ble .L_8002E4F0
/* 8002E508 0002A488  3F C0 80 00 */	lis r30, 0x800000DC@ha
/* 8002E50C 0002A48C  38 7E 00 DC */	addi r3, r30, 0x800000DC@l
/* 8002E510 0002A490  48 00 00 51 */	bl OSInitThreadQueue
/* 8002E514 0002A494  38 9E 00 DC */	addi r4, r30, 0xdc
/* 8002E518 0002A498  84 64 00 04 */	lwzu r3, 0x4(r4)
/* 8002E51C 0002A49C  28 03 00 00 */	cmplwi r3, 0x0
/* 8002E520 0002A4A0  40 82 00 0C */	bne .L_8002E52C
/* 8002E524 0002A4A4  93 FE 00 DC */	stw r31, 0xdc(r30)
/* 8002E528 0002A4A8  48 00 00 08 */	b .L_8002E530
.L_8002E52C:
/* 8002E52C 0002A4AC  93 E3 02 FC */	stw r31, 0x2fc(r3)
.L_8002E530:
/* 8002E530 0002A4B0  90 7F 03 00 */	stw r3, 0x300(r31)
/* 8002E534 0002A4B4  3B C0 00 00 */	li r30, 0x0
/* 8002E538 0002A4B8  38 7C 07 20 */	addi r3, r28, 0x720
/* 8002E53C 0002A4BC  93 DF 02 FC */	stw r30, 0x2fc(r31)
/* 8002E540 0002A4C0  93 E4 00 00 */	stw r31, 0x0(r4)
/* 8002E544 0002A4C4  4B FF B2 4D */	bl OSClearContext
/* 8002E548 0002A4C8  93 CD 84 E0 */	stw r30, Reschedule@sda21(r13)
/* 8002E54C 0002A4CC  BB 41 00 08 */	lmw r26, 0x8(r1)
/* 8002E550 0002A4D0  80 01 00 24 */	lwz r0, 0x24(r1)
/* 8002E554 0002A4D4  38 21 00 20 */	addi r1, r1, 0x20
/* 8002E558 0002A4D8  7C 08 03 A6 */	mtlr r0
/* 8002E55C 0002A4DC  4E 80 00 20 */	blr
.endfn __OSThreadInit

.fn OSInitThreadQueue, global
/* 8002E560 0002A4E0  38 00 00 00 */	li r0, 0x0
/* 8002E564 0002A4E4  90 03 00 04 */	stw r0, 0x4(r3)
/* 8002E568 0002A4E8  90 03 00 00 */	stw r0, 0x0(r3)
/* 8002E56C 0002A4EC  4E 80 00 20 */	blr
.endfn OSInitThreadQueue

.fn OSGetCurrentThread, global
/* 8002E570 0002A4F0  3C 60 80 00 */	lis r3, 0x800000E4@ha
/* 8002E574 0002A4F4  80 63 00 E4 */	lwz r3, 0x800000E4@l(r3)
/* 8002E578 0002A4F8  4E 80 00 20 */	blr
.endfn OSGetCurrentThread

.fn OSIsThreadSuspended, global
/* 8002E57C 0002A4FC  80 03 02 CC */	lwz r0, 0x2cc(r3)
/* 8002E580 0002A500  2C 00 00 00 */	cmpwi r0, 0x0
/* 8002E584 0002A504  40 81 00 0C */	ble .L_8002E590
/* 8002E588 0002A508  38 60 00 01 */	li r3, 0x1
/* 8002E58C 0002A50C  4E 80 00 20 */	blr
.L_8002E590:
/* 8002E590 0002A510  38 60 00 00 */	li r3, 0x0
/* 8002E594 0002A514  4E 80 00 20 */	blr
.endfn OSIsThreadSuspended

.fn OSDisableScheduler, global
/* 8002E598 0002A518  7C 08 02 A6 */	mflr r0
/* 8002E59C 0002A51C  90 01 00 04 */	stw r0, 0x4(r1)
/* 8002E5A0 0002A520  94 21 FF F0 */	stwu r1, -0x10(r1)
/* 8002E5A4 0002A524  93 E1 00 0C */	stw r31, 0xc(r1)
/* 8002E5A8 0002A528  4B FF CA 3D */	bl OSDisableInterrupts
/* 8002E5AC 0002A52C  80 8D 84 E0 */	lwz r4, Reschedule@sda21(r13)
/* 8002E5B0 0002A530  38 04 00 01 */	addi r0, r4, 0x1
/* 8002E5B4 0002A534  90 0D 84 E0 */	stw r0, Reschedule@sda21(r13)
/* 8002E5B8 0002A538  7C 9F 23 78 */	mr r31, r4
/* 8002E5BC 0002A53C  4B FF CA 51 */	bl OSRestoreInterrupts
/* 8002E5C0 0002A540  80 01 00 14 */	lwz r0, 0x14(r1)
/* 8002E5C4 0002A544  7F E3 FB 78 */	mr r3, r31
/* 8002E5C8 0002A548  83 E1 00 0C */	lwz r31, 0xc(r1)
/* 8002E5CC 0002A54C  38 21 00 10 */	addi r1, r1, 0x10
/* 8002E5D0 0002A550  7C 08 03 A6 */	mtlr r0
/* 8002E5D4 0002A554  4E 80 00 20 */	blr
.endfn OSDisableScheduler

.fn OSEnableScheduler, global
/* 8002E5D8 0002A558  7C 08 02 A6 */	mflr r0
/* 8002E5DC 0002A55C  90 01 00 04 */	stw r0, 0x4(r1)
/* 8002E5E0 0002A560  94 21 FF F0 */	stwu r1, -0x10(r1)
/* 8002E5E4 0002A564  93 E1 00 0C */	stw r31, 0xc(r1)
/* 8002E5E8 0002A568  4B FF C9 FD */	bl OSDisableInterrupts
/* 8002E5EC 0002A56C  80 8D 84 E0 */	lwz r4, Reschedule@sda21(r13)
/* 8002E5F0 0002A570  38 04 FF FF */	addi r0, r4, -0x1
/* 8002E5F4 0002A574  90 0D 84 E0 */	stw r0, Reschedule@sda21(r13)
/* 8002E5F8 0002A578  7C 9F 23 78 */	mr r31, r4
/* 8002E5FC 0002A57C  4B FF CA 11 */	bl OSRestoreInterrupts
/* 8002E600 0002A580  80 01 00 14 */	lwz r0, 0x14(r1)
/* 8002E604 0002A584  7F E3 FB 78 */	mr r3, r31
/* 8002E608 0002A588  83 E1 00 0C */	lwz r31, 0xc(r1)
/* 8002E60C 0002A58C  38 21 00 10 */	addi r1, r1, 0x10
/* 8002E610 0002A590  7C 08 03 A6 */	mtlr r0
/* 8002E614 0002A594  4E 80 00 20 */	blr
.endfn OSEnableScheduler

.fn UnsetRun, local
/* 8002E618 0002A598  80 83 02 E0 */	lwz r4, 0x2e0(r3)
/* 8002E61C 0002A59C  80 A3 02 DC */	lwz r5, 0x2dc(r3)
/* 8002E620 0002A5A0  28 04 00 00 */	cmplwi r4, 0x0
/* 8002E624 0002A5A4  80 C3 02 E4 */	lwz r6, 0x2e4(r3)
/* 8002E628 0002A5A8  40 82 00 0C */	bne .L_8002E634
/* 8002E62C 0002A5AC  90 C5 00 04 */	stw r6, 0x4(r5)
/* 8002E630 0002A5B0  48 00 00 08 */	b .L_8002E638
.L_8002E634:
/* 8002E634 0002A5B4  90 C4 02 E4 */	stw r6, 0x2e4(r4)
.L_8002E638:
/* 8002E638 0002A5B8  28 06 00 00 */	cmplwi r6, 0x0
/* 8002E63C 0002A5BC  40 82 00 0C */	bne .L_8002E648
/* 8002E640 0002A5C0  90 85 00 00 */	stw r4, 0x0(r5)
/* 8002E644 0002A5C4  48 00 00 08 */	b .L_8002E64C
.L_8002E648:
/* 8002E648 0002A5C8  90 86 02 E0 */	stw r4, 0x2e0(r6)
.L_8002E64C:
/* 8002E64C 0002A5CC  80 05 00 00 */	lwz r0, 0x0(r5)
/* 8002E650 0002A5D0  28 00 00 00 */	cmplwi r0, 0x0
/* 8002E654 0002A5D4  40 82 00 20 */	bne .L_8002E674
/* 8002E658 0002A5D8  80 03 02 D0 */	lwz r0, 0x2d0(r3)
/* 8002E65C 0002A5DC  38 80 00 01 */	li r4, 0x1
/* 8002E660 0002A5E0  80 AD 84 D8 */	lwz r5, RunQueueBits@sda21(r13)
/* 8002E664 0002A5E4  20 00 00 1F */	subfic r0, r0, 0x1f
/* 8002E668 0002A5E8  7C 80 00 30 */	slw r0, r4, r0
/* 8002E66C 0002A5EC  7C A0 00 78 */	andc r0, r5, r0
/* 8002E670 0002A5F0  90 0D 84 D8 */	stw r0, RunQueueBits@sda21(r13)
.L_8002E674:
/* 8002E674 0002A5F4  38 00 00 00 */	li r0, 0x0
/* 8002E678 0002A5F8  90 03 02 DC */	stw r0, 0x2dc(r3)
/* 8002E67C 0002A5FC  4E 80 00 20 */	blr
.endfn UnsetRun

.fn __OSGetEffectivePriority, global
/* 8002E680 0002A600  80 83 02 D4 */	lwz r4, 0x2d4(r3)
/* 8002E684 0002A604  80 A3 02 F4 */	lwz r5, 0x2f4(r3)
/* 8002E688 0002A608  48 00 00 24 */	b .L_8002E6AC
.L_8002E68C:
/* 8002E68C 0002A60C  80 65 00 00 */	lwz r3, 0x0(r5)
/* 8002E690 0002A610  28 03 00 00 */	cmplwi r3, 0x0
/* 8002E694 0002A614  41 82 00 14 */	beq .L_8002E6A8
/* 8002E698 0002A618  80 03 02 D0 */	lwz r0, 0x2d0(r3)
/* 8002E69C 0002A61C  7C 00 20 00 */	cmpw r0, r4
/* 8002E6A0 0002A620  40 80 00 08 */	bge .L_8002E6A8
/* 8002E6A4 0002A624  7C 04 03 78 */	mr r4, r0
.L_8002E6A8:
/* 8002E6A8 0002A628  80 A5 00 10 */	lwz r5, 0x10(r5)
.L_8002E6AC:
/* 8002E6AC 0002A62C  28 05 00 00 */	cmplwi r5, 0x0
/* 8002E6B0 0002A630  40 82 FF DC */	bne .L_8002E68C
/* 8002E6B4 0002A634  7C 83 23 78 */	mr r3, r4
/* 8002E6B8 0002A638  4E 80 00 20 */	blr
.endfn __OSGetEffectivePriority

.fn SetEffectivePriority, local
/* 8002E6BC 0002A63C  7C 08 02 A6 */	mflr r0
/* 8002E6C0 0002A640  90 01 00 04 */	stw r0, 0x4(r1)
/* 8002E6C4 0002A644  94 21 FF E8 */	stwu r1, -0x18(r1)
/* 8002E6C8 0002A648  93 E1 00 14 */	stw r31, 0x14(r1)
/* 8002E6CC 0002A64C  7C 7F 1B 78 */	mr r31, r3
/* 8002E6D0 0002A650  93 C1 00 10 */	stw r30, 0x10(r1)
/* 8002E6D4 0002A654  3B C4 00 00 */	addi r30, r4, 0x0
/* 8002E6D8 0002A658  A0 03 02 C8 */	lhz r0, 0x2c8(r3)
/* 8002E6DC 0002A65C  2C 00 00 03 */	cmpwi r0, 0x3
/* 8002E6E0 0002A660  41 82 01 80 */	beq .L_8002E860
/* 8002E6E4 0002A664  40 80 00 14 */	bge .L_8002E6F8
/* 8002E6E8 0002A668  2C 00 00 01 */	cmpwi r0, 0x1
/* 8002E6EC 0002A66C  41 82 00 18 */	beq .L_8002E704
/* 8002E6F0 0002A670  40 80 01 64 */	bge .L_8002E854
/* 8002E6F4 0002A674  48 00 01 6C */	b .L_8002E860
.L_8002E6F8:
/* 8002E6F8 0002A678  2C 00 00 05 */	cmpwi r0, 0x5
/* 8002E6FC 0002A67C  40 80 01 64 */	bge .L_8002E860
/* 8002E700 0002A680  48 00 00 7C */	b .L_8002E77C
.L_8002E704:
/* 8002E704 0002A684  7F E3 FB 78 */	mr r3, r31
/* 8002E708 0002A688  4B FF FF 11 */	bl UnsetRun
/* 8002E70C 0002A68C  93 DF 02 D0 */	stw r30, 0x2d0(r31)
/* 8002E710 0002A690  3C 60 80 08 */	lis r3, RunQueue@ha
/* 8002E714 0002A694  38 03 03 28 */	addi r0, r3, RunQueue@l
/* 8002E718 0002A698  80 7F 02 D0 */	lwz r3, 0x2d0(r31)
/* 8002E71C 0002A69C  54 63 18 38 */	slwi r3, r3, 3
/* 8002E720 0002A6A0  7C 00 1A 14 */	add r0, r0, r3
/* 8002E724 0002A6A4  90 1F 02 DC */	stw r0, 0x2dc(r31)
/* 8002E728 0002A6A8  80 9F 02 DC */	lwz r4, 0x2dc(r31)
/* 8002E72C 0002A6AC  80 64 00 04 */	lwz r3, 0x4(r4)
/* 8002E730 0002A6B0  28 03 00 00 */	cmplwi r3, 0x0
/* 8002E734 0002A6B4  40 82 00 0C */	bne .L_8002E740
/* 8002E738 0002A6B8  93 E4 00 00 */	stw r31, 0x0(r4)
/* 8002E73C 0002A6BC  48 00 00 08 */	b .L_8002E744
.L_8002E740:
/* 8002E740 0002A6C0  93 E3 02 E0 */	stw r31, 0x2e0(r3)
.L_8002E744:
/* 8002E744 0002A6C4  90 7F 02 E4 */	stw r3, 0x2e4(r31)
/* 8002E748 0002A6C8  38 00 00 00 */	li r0, 0x0
/* 8002E74C 0002A6CC  38 60 00 01 */	li r3, 0x1
/* 8002E750 0002A6D0  90 1F 02 E0 */	stw r0, 0x2e0(r31)
/* 8002E754 0002A6D4  80 9F 02 DC */	lwz r4, 0x2dc(r31)
/* 8002E758 0002A6D8  93 E4 00 04 */	stw r31, 0x4(r4)
/* 8002E75C 0002A6DC  80 1F 02 D0 */	lwz r0, 0x2d0(r31)
/* 8002E760 0002A6E0  80 8D 84 D8 */	lwz r4, RunQueueBits@sda21(r13)
/* 8002E764 0002A6E4  20 00 00 1F */	subfic r0, r0, 0x1f
/* 8002E768 0002A6E8  7C 60 00 30 */	slw r0, r3, r0
/* 8002E76C 0002A6EC  7C 80 03 78 */	or r0, r4, r0
/* 8002E770 0002A6F0  90 0D 84 D8 */	stw r0, RunQueueBits@sda21(r13)
/* 8002E774 0002A6F4  90 6D 84 DC */	stw r3, RunQueueHint@sda21(r13)
/* 8002E778 0002A6F8  48 00 00 E8 */	b .L_8002E860
.L_8002E77C:
/* 8002E77C 0002A6FC  80 9F 02 E0 */	lwz r4, 0x2e0(r31)
/* 8002E780 0002A700  80 BF 02 E4 */	lwz r5, 0x2e4(r31)
/* 8002E784 0002A704  28 04 00 00 */	cmplwi r4, 0x0
/* 8002E788 0002A708  40 82 00 10 */	bne .L_8002E798
/* 8002E78C 0002A70C  80 7F 02 DC */	lwz r3, 0x2dc(r31)
/* 8002E790 0002A710  90 A3 00 04 */	stw r5, 0x4(r3)
/* 8002E794 0002A714  48 00 00 08 */	b .L_8002E79C
.L_8002E798:
/* 8002E798 0002A718  90 A4 02 E4 */	stw r5, 0x2e4(r4)
.L_8002E79C:
/* 8002E79C 0002A71C  28 05 00 00 */	cmplwi r5, 0x0
/* 8002E7A0 0002A720  40 82 00 10 */	bne .L_8002E7B0
/* 8002E7A4 0002A724  80 7F 02 DC */	lwz r3, 0x2dc(r31)
/* 8002E7A8 0002A728  90 83 00 00 */	stw r4, 0x0(r3)
/* 8002E7AC 0002A72C  48 00 00 08 */	b .L_8002E7B4
.L_8002E7B0:
/* 8002E7B0 0002A730  90 85 02 E0 */	stw r4, 0x2e0(r5)
.L_8002E7B4:
/* 8002E7B4 0002A734  93 DF 02 D0 */	stw r30, 0x2d0(r31)
/* 8002E7B8 0002A738  80 9F 02 DC */	lwz r4, 0x2dc(r31)
/* 8002E7BC 0002A73C  80 A4 00 00 */	lwz r5, 0x0(r4)
/* 8002E7C0 0002A740  48 00 00 08 */	b .L_8002E7C8
.L_8002E7C4:
/* 8002E7C4 0002A744  80 A5 02 E0 */	lwz r5, 0x2e0(r5)
.L_8002E7C8:
/* 8002E7C8 0002A748  28 05 00 00 */	cmplwi r5, 0x0
/* 8002E7CC 0002A74C  41 82 00 14 */	beq .L_8002E7E0
/* 8002E7D0 0002A750  80 65 02 D0 */	lwz r3, 0x2d0(r5)
/* 8002E7D4 0002A754  80 1F 02 D0 */	lwz r0, 0x2d0(r31)
/* 8002E7D8 0002A758  7C 03 00 00 */	cmpw r3, r0
/* 8002E7DC 0002A75C  40 81 FF E8 */	ble .L_8002E7C4
.L_8002E7E0:
/* 8002E7E0 0002A760  28 05 00 00 */	cmplwi r5, 0x0
/* 8002E7E4 0002A764  40 82 00 34 */	bne .L_8002E818
/* 8002E7E8 0002A768  80 64 00 04 */	lwz r3, 0x4(r4)
/* 8002E7EC 0002A76C  28 03 00 00 */	cmplwi r3, 0x0
/* 8002E7F0 0002A770  40 82 00 0C */	bne .L_8002E7FC
/* 8002E7F4 0002A774  93 E4 00 00 */	stw r31, 0x0(r4)
/* 8002E7F8 0002A778  48 00 00 08 */	b .L_8002E800
.L_8002E7FC:
/* 8002E7FC 0002A77C  93 E3 02 E0 */	stw r31, 0x2e0(r3)
.L_8002E800:
/* 8002E800 0002A780  90 7F 02 E4 */	stw r3, 0x2e4(r31)
/* 8002E804 0002A784  38 00 00 00 */	li r0, 0x0
/* 8002E808 0002A788  90 1F 02 E0 */	stw r0, 0x2e0(r31)
/* 8002E80C 0002A78C  80 7F 02 DC */	lwz r3, 0x2dc(r31)
/* 8002E810 0002A790  93 E3 00 04 */	stw r31, 0x4(r3)
/* 8002E814 0002A794  48 00 00 2C */	b .L_8002E840
.L_8002E818:
/* 8002E818 0002A798  90 BF 02 E0 */	stw r5, 0x2e0(r31)
/* 8002E81C 0002A79C  80 65 02 E4 */	lwz r3, 0x2e4(r5)
/* 8002E820 0002A7A0  93 E5 02 E4 */	stw r31, 0x2e4(r5)
/* 8002E824 0002A7A4  28 03 00 00 */	cmplwi r3, 0x0
/* 8002E828 0002A7A8  90 7F 02 E4 */	stw r3, 0x2e4(r31)
/* 8002E82C 0002A7AC  40 82 00 10 */	bne .L_8002E83C
/* 8002E830 0002A7B0  80 7F 02 DC */	lwz r3, 0x2dc(r31)
/* 8002E834 0002A7B4  93 E3 00 00 */	stw r31, 0x0(r3)
/* 8002E838 0002A7B8  48 00 00 08 */	b .L_8002E840
.L_8002E83C:
/* 8002E83C 0002A7BC  93 E3 02 E0 */	stw r31, 0x2e0(r3)
.L_8002E840:
/* 8002E840 0002A7C0  80 7F 02 F0 */	lwz r3, 0x2f0(r31)
/* 8002E844 0002A7C4  28 03 00 00 */	cmplwi r3, 0x0
/* 8002E848 0002A7C8  41 82 00 18 */	beq .L_8002E860
/* 8002E84C 0002A7CC  80 63 00 08 */	lwz r3, 0x8(r3)
/* 8002E850 0002A7D0  48 00 00 14 */	b .L_8002E864
.L_8002E854:
/* 8002E854 0002A7D4  38 00 00 01 */	li r0, 0x1
/* 8002E858 0002A7D8  90 0D 84 DC */	stw r0, RunQueueHint@sda21(r13)
/* 8002E85C 0002A7DC  93 DF 02 D0 */	stw r30, 0x2d0(r31)
.L_8002E860:
/* 8002E860 0002A7E0  38 60 00 00 */	li r3, 0x0
.L_8002E864:
/* 8002E864 0002A7E4  80 01 00 1C */	lwz r0, 0x1c(r1)
/* 8002E868 0002A7E8  83 E1 00 14 */	lwz r31, 0x14(r1)
/* 8002E86C 0002A7EC  83 C1 00 10 */	lwz r30, 0x10(r1)
/* 8002E870 0002A7F0  7C 08 03 A6 */	mtlr r0
/* 8002E874 0002A7F4  38 21 00 18 */	addi r1, r1, 0x18
/* 8002E878 0002A7F8  4E 80 00 20 */	blr
.endfn SetEffectivePriority

.fn SelectThread, local
/* 8002E87C 0002A7FC  7C 08 02 A6 */	mflr r0
/* 8002E880 0002A800  3C 80 80 08 */	lis r4, RunQueue@ha
/* 8002E884 0002A804  90 01 00 04 */	stw r0, 0x4(r1)
/* 8002E888 0002A808  94 21 FF E8 */	stwu r1, -0x18(r1)
/* 8002E88C 0002A80C  93 E1 00 14 */	stw r31, 0x14(r1)
/* 8002E890 0002A810  3B E4 03 28 */	addi r31, r4, RunQueue@l
/* 8002E894 0002A814  93 C1 00 10 */	stw r30, 0x10(r1)
/* 8002E898 0002A818  3B C3 00 00 */	addi r30, r3, 0x0
/* 8002E89C 0002A81C  80 0D 84 E0 */	lwz r0, Reschedule@sda21(r13)
/* 8002E8A0 0002A820  2C 00 00 00 */	cmpwi r0, 0x0
/* 8002E8A4 0002A824  40 81 00 0C */	ble .L_8002E8B0
/* 8002E8A8 0002A828  38 60 00 00 */	li r3, 0x0
/* 8002E8AC 0002A82C  48 00 01 B8 */	b .L_8002EA64
.L_8002E8B0:
/* 8002E8B0 0002A830  4B FF AD 75 */	bl OSGetCurrentContext
/* 8002E8B4 0002A834  3C 80 80 00 */	lis r4, 0x800000E4@ha
/* 8002E8B8 0002A838  80 C4 00 E4 */	lwz r6, 0x800000E4@l(r4)
/* 8002E8BC 0002A83C  7C 03 30 40 */	cmplw r3, r6
/* 8002E8C0 0002A840  38 66 00 00 */	addi r3, r6, 0x0
/* 8002E8C4 0002A844  41 82 00 0C */	beq .L_8002E8D0
/* 8002E8C8 0002A848  38 60 00 00 */	li r3, 0x0
/* 8002E8CC 0002A84C  48 00 01 98 */	b .L_8002EA64
.L_8002E8D0:
/* 8002E8D0 0002A850  28 06 00 00 */	cmplwi r6, 0x0
/* 8002E8D4 0002A854  41 82 00 BC */	beq .L_8002E990
/* 8002E8D8 0002A858  A0 06 02 C8 */	lhz r0, 0x2c8(r6)
/* 8002E8DC 0002A85C  28 00 00 02 */	cmplwi r0, 0x2
/* 8002E8E0 0002A860  40 82 00 90 */	bne .L_8002E970
/* 8002E8E4 0002A864  2C 1E 00 00 */	cmpwi r30, 0x0
/* 8002E8E8 0002A868  40 82 00 20 */	bne .L_8002E908
/* 8002E8EC 0002A86C  80 8D 84 D8 */	lwz r4, RunQueueBits@sda21(r13)
/* 8002E8F0 0002A870  80 06 02 D0 */	lwz r0, 0x2d0(r6)
/* 8002E8F4 0002A874  7C 84 00 34 */	cntlzw r4, r4
/* 8002E8F8 0002A878  7C 00 20 00 */	cmpw r0, r4
/* 8002E8FC 0002A87C  41 81 00 0C */	bgt .L_8002E908
/* 8002E900 0002A880  38 60 00 00 */	li r3, 0x0
/* 8002E904 0002A884  48 00 01 60 */	b .L_8002EA64
.L_8002E908:
/* 8002E908 0002A888  38 00 00 01 */	li r0, 0x1
/* 8002E90C 0002A88C  B0 06 02 C8 */	sth r0, 0x2c8(r6)
/* 8002E910 0002A890  80 06 02 D0 */	lwz r0, 0x2d0(r6)
/* 8002E914 0002A894  54 00 18 38 */	slwi r0, r0, 3
/* 8002E918 0002A898  7C 1F 02 14 */	add r0, r31, r0
/* 8002E91C 0002A89C  90 06 02 DC */	stw r0, 0x2dc(r6)
/* 8002E920 0002A8A0  80 A6 02 DC */	lwz r5, 0x2dc(r6)
/* 8002E924 0002A8A4  80 85 00 04 */	lwz r4, 0x4(r5)
/* 8002E928 0002A8A8  28 04 00 00 */	cmplwi r4, 0x0
/* 8002E92C 0002A8AC  40 82 00 0C */	bne .L_8002E938
/* 8002E930 0002A8B0  90 C5 00 00 */	stw r6, 0x0(r5)
/* 8002E934 0002A8B4  48 00 00 08 */	b .L_8002E93C
.L_8002E938:
/* 8002E938 0002A8B8  90 C4 02 E0 */	stw r6, 0x2e0(r4)
.L_8002E93C:
/* 8002E93C 0002A8BC  90 86 02 E4 */	stw r4, 0x2e4(r6)
/* 8002E940 0002A8C0  38 00 00 00 */	li r0, 0x0
/* 8002E944 0002A8C4  38 80 00 01 */	li r4, 0x1
/* 8002E948 0002A8C8  90 06 02 E0 */	stw r0, 0x2e0(r6)
/* 8002E94C 0002A8CC  80 A6 02 DC */	lwz r5, 0x2dc(r6)
/* 8002E950 0002A8D0  90 C5 00 04 */	stw r6, 0x4(r5)
/* 8002E954 0002A8D4  80 06 02 D0 */	lwz r0, 0x2d0(r6)
/* 8002E958 0002A8D8  80 AD 84 D8 */	lwz r5, RunQueueBits@sda21(r13)
/* 8002E95C 0002A8DC  20 00 00 1F */	subfic r0, r0, 0x1f
/* 8002E960 0002A8E0  7C 80 00 30 */	slw r0, r4, r0
/* 8002E964 0002A8E4  7C A0 03 78 */	or r0, r5, r0
/* 8002E968 0002A8E8  90 0D 84 D8 */	stw r0, RunQueueBits@sda21(r13)
/* 8002E96C 0002A8EC  90 8D 84 DC */	stw r4, RunQueueHint@sda21(r13)
.L_8002E970:
/* 8002E970 0002A8F0  A0 06 01 A2 */	lhz r0, 0x1a2(r6)
/* 8002E974 0002A8F4  54 00 07 BD */	rlwinm. r0, r0, 0, 30, 30
/* 8002E978 0002A8F8  40 82 00 18 */	bne .L_8002E990
/* 8002E97C 0002A8FC  4B FF AC B5 */	bl OSSaveContext
/* 8002E980 0002A900  28 03 00 00 */	cmplwi r3, 0x0
/* 8002E984 0002A904  41 82 00 0C */	beq .L_8002E990
/* 8002E988 0002A908  38 60 00 00 */	li r3, 0x0
/* 8002E98C 0002A90C  48 00 00 D8 */	b .L_8002EA64
.L_8002E990:
/* 8002E990 0002A910  80 0D 84 D8 */	lwz r0, RunQueueBits@sda21(r13)
/* 8002E994 0002A914  38 80 00 00 */	li r4, 0x0
/* 8002E998 0002A918  3C 60 80 00 */	lis r3, 0x800000E4@ha
/* 8002E99C 0002A91C  28 00 00 00 */	cmplwi r0, 0x0
/* 8002E9A0 0002A920  90 83 00 E4 */	stw r4, 0x800000E4@l(r3)
/* 8002E9A4 0002A924  40 82 00 34 */	bne .L_8002E9D8
/* 8002E9A8 0002A928  38 7F 07 20 */	addi r3, r31, 0x720
/* 8002E9AC 0002A92C  4B FF AC 1D */	bl OSSetCurrentContext
.L_8002E9B0:
/* 8002E9B0 0002A930  4B FF C6 49 */	bl OSEnableInterrupts
.L_8002E9B4:
/* 8002E9B4 0002A934  80 0D 84 D8 */	lwz r0, RunQueueBits@sda21(r13)
/* 8002E9B8 0002A938  28 00 00 00 */	cmplwi r0, 0x0
/* 8002E9BC 0002A93C  41 82 FF F8 */	beq .L_8002E9B4
/* 8002E9C0 0002A940  4B FF C6 25 */	bl OSDisableInterrupts
/* 8002E9C4 0002A944  80 0D 84 D8 */	lwz r0, RunQueueBits@sda21(r13)
/* 8002E9C8 0002A948  28 00 00 00 */	cmplwi r0, 0x0
/* 8002E9CC 0002A94C  41 82 FF E4 */	beq .L_8002E9B0
/* 8002E9D0 0002A950  38 7F 07 20 */	addi r3, r31, 0x720
/* 8002E9D4 0002A954  4B FF AD BD */	bl OSClearContext
.L_8002E9D8:
/* 8002E9D8 0002A958  38 60 00 00 */	li r3, 0x0
/* 8002E9DC 0002A95C  90 6D 84 DC */	stw r3, RunQueueHint@sda21(r13)
/* 8002E9E0 0002A960  80 0D 84 D8 */	lwz r0, RunQueueBits@sda21(r13)
/* 8002E9E4 0002A964  7C 07 00 34 */	cntlzw r7, r0
/* 8002E9E8 0002A968  54 E0 18 38 */	slwi r0, r7, 3
/* 8002E9EC 0002A96C  7C 9F 02 14 */	add r4, r31, r0
/* 8002E9F0 0002A970  80 A4 00 00 */	lwz r5, 0x0(r4)
/* 8002E9F4 0002A974  80 C5 02 E0 */	lwz r6, 0x2e0(r5)
/* 8002E9F8 0002A978  3B E5 00 00 */	addi r31, r5, 0x0
/* 8002E9FC 0002A97C  28 06 00 00 */	cmplwi r6, 0x0
/* 8002EA00 0002A980  40 82 00 0C */	bne .L_8002EA0C
/* 8002EA04 0002A984  90 64 00 04 */	stw r3, 0x4(r4)
/* 8002EA08 0002A988  48 00 00 08 */	b .L_8002EA10
.L_8002EA0C:
/* 8002EA0C 0002A98C  90 66 02 E4 */	stw r3, 0x2e4(r6)
.L_8002EA10:
/* 8002EA10 0002A990  90 C4 00 00 */	stw r6, 0x0(r4)
/* 8002EA14 0002A994  80 04 00 00 */	lwz r0, 0x0(r4)
/* 8002EA18 0002A998  28 00 00 00 */	cmplwi r0, 0x0
/* 8002EA1C 0002A99C  40 82 00 1C */	bne .L_8002EA38
/* 8002EA20 0002A9A0  20 07 00 1F */	subfic r0, r7, 0x1f
/* 8002EA24 0002A9A4  80 8D 84 D8 */	lwz r4, RunQueueBits@sda21(r13)
/* 8002EA28 0002A9A8  38 60 00 01 */	li r3, 0x1
/* 8002EA2C 0002A9AC  7C 60 00 30 */	slw r0, r3, r0
/* 8002EA30 0002A9B0  7C 80 00 78 */	andc r0, r4, r0
/* 8002EA34 0002A9B4  90 0D 84 D8 */	stw r0, RunQueueBits@sda21(r13)
.L_8002EA38:
/* 8002EA38 0002A9B8  38 00 00 00 */	li r0, 0x0
/* 8002EA3C 0002A9BC  90 1F 02 DC */	stw r0, 0x2dc(r31)
/* 8002EA40 0002A9C0  38 00 00 02 */	li r0, 0x2
/* 8002EA44 0002A9C4  3C 80 80 00 */	lis r4, 0x800000E4@ha
/* 8002EA48 0002A9C8  B0 1F 02 C8 */	sth r0, 0x2c8(r31)
/* 8002EA4C 0002A9CC  7F E3 FB 78 */	mr r3, r31
/* 8002EA50 0002A9D0  93 E4 00 E4 */	stw r31, 0x800000E4@l(r4)
/* 8002EA54 0002A9D4  4B FF AB 75 */	bl OSSetCurrentContext
/* 8002EA58 0002A9D8  7F E3 FB 78 */	mr r3, r31
/* 8002EA5C 0002A9DC  4B FF AC 55 */	bl OSLoadContext
/* 8002EA60 0002A9E0  7F E3 FB 78 */	mr r3, r31
.L_8002EA64:
/* 8002EA64 0002A9E4  80 01 00 1C */	lwz r0, 0x1c(r1)
/* 8002EA68 0002A9E8  83 E1 00 14 */	lwz r31, 0x14(r1)
/* 8002EA6C 0002A9EC  83 C1 00 10 */	lwz r30, 0x10(r1)
/* 8002EA70 0002A9F0  7C 08 03 A6 */	mtlr r0
/* 8002EA74 0002A9F4  38 21 00 18 */	addi r1, r1, 0x18
/* 8002EA78 0002A9F8  4E 80 00 20 */	blr
.endfn SelectThread

.fn __OSReschedule, global
/* 8002EA7C 0002A9FC  7C 08 02 A6 */	mflr r0
/* 8002EA80 0002AA00  90 01 00 04 */	stw r0, 0x4(r1)
/* 8002EA84 0002AA04  94 21 FF F8 */	stwu r1, -0x8(r1)
/* 8002EA88 0002AA08  80 0D 84 DC */	lwz r0, RunQueueHint@sda21(r13)
/* 8002EA8C 0002AA0C  2C 00 00 00 */	cmpwi r0, 0x0
/* 8002EA90 0002AA10  41 82 00 0C */	beq .L_8002EA9C
/* 8002EA94 0002AA14  38 60 00 00 */	li r3, 0x0
/* 8002EA98 0002AA18  4B FF FD E5 */	bl SelectThread
.L_8002EA9C:
/* 8002EA9C 0002AA1C  80 01 00 0C */	lwz r0, 0xc(r1)
/* 8002EAA0 0002AA20  38 21 00 08 */	addi r1, r1, 0x8
/* 8002EAA4 0002AA24  7C 08 03 A6 */	mtlr r0
/* 8002EAA8 0002AA28  4E 80 00 20 */	blr
.endfn __OSReschedule

.fn OSCreateThread, global
/* 8002EAAC 0002AA2C  7C 08 02 A6 */	mflr r0
/* 8002EAB0 0002AA30  2C 08 00 00 */	cmpwi r8, 0x0
/* 8002EAB4 0002AA34  90 01 00 04 */	stw r0, 0x4(r1)
/* 8002EAB8 0002AA38  94 21 FF C8 */	stwu r1, -0x38(r1)
/* 8002EABC 0002AA3C  93 E1 00 34 */	stw r31, 0x34(r1)
/* 8002EAC0 0002AA40  3B E3 00 00 */	addi r31, r3, 0x0
/* 8002EAC4 0002AA44  93 C1 00 30 */	stw r30, 0x30(r1)
/* 8002EAC8 0002AA48  3B C7 00 00 */	addi r30, r7, 0x0
/* 8002EACC 0002AA4C  93 A1 00 2C */	stw r29, 0x2c(r1)
/* 8002EAD0 0002AA50  3B A6 00 00 */	addi r29, r6, 0x0
/* 8002EAD4 0002AA54  93 81 00 28 */	stw r28, 0x28(r1)
/* 8002EAD8 0002AA58  3B 85 00 00 */	addi r28, r5, 0x0
/* 8002EADC 0002AA5C  41 80 00 0C */	blt .L_8002EAE8
/* 8002EAE0 0002AA60  2C 08 00 1F */	cmpwi r8, 0x1f
/* 8002EAE4 0002AA64  40 81 00 0C */	ble .L_8002EAF0
.L_8002EAE8:
/* 8002EAE8 0002AA68  38 60 00 00 */	li r3, 0x0
/* 8002EAEC 0002AA6C  48 00 00 C0 */	b .L_8002EBAC
.L_8002EAF0:
/* 8002EAF0 0002AA70  38 E0 00 01 */	li r7, 0x1
/* 8002EAF4 0002AA74  B0 FF 02 C8 */	sth r7, 0x2c8(r31)
/* 8002EAF8 0002AA78  55 20 07 FE */	clrlwi r0, r9, 31
/* 8002EAFC 0002AA7C  57 A9 00 38 */	clrrwi r9, r29, 3
/* 8002EB00 0002AA80  B0 1F 02 CA */	sth r0, 0x2ca(r31)
/* 8002EB04 0002AA84  38 C0 FF FF */	li r6, -0x1
/* 8002EB08 0002AA88  38 00 00 00 */	li r0, 0x0
/* 8002EB0C 0002AA8C  91 1F 02 D4 */	stw r8, 0x2d4(r31)
/* 8002EB10 0002AA90  38 7F 00 00 */	addi r3, r31, 0x0
/* 8002EB14 0002AA94  38 A9 FF F8 */	addi r5, r9, -0x8
/* 8002EB18 0002AA98  91 1F 02 D0 */	stw r8, 0x2d0(r31)
/* 8002EB1C 0002AA9C  90 FF 02 CC */	stw r7, 0x2cc(r31)
/* 8002EB20 0002AAA0  90 DF 02 D8 */	stw r6, 0x2d8(r31)
/* 8002EB24 0002AAA4  90 1F 02 F0 */	stw r0, 0x2f0(r31)
/* 8002EB28 0002AAA8  90 1F 02 EC */	stw r0, 0x2ec(r31)
/* 8002EB2C 0002AAAC  90 1F 02 E8 */	stw r0, 0x2e8(r31)
/* 8002EB30 0002AAB0  90 1F 02 F8 */	stw r0, 0x2f8(r31)
/* 8002EB34 0002AAB4  90 1F 02 F4 */	stw r0, 0x2f4(r31)
/* 8002EB38 0002AAB8  90 09 FF F8 */	stw r0, -0x8(r9)
/* 8002EB3C 0002AABC  90 09 FF FC */	stw r0, -0x4(r9)
/* 8002EB40 0002AAC0  4B FF AC 75 */	bl OSInitContext
/* 8002EB44 0002AAC4  3C 60 80 03 */	lis r3, OSExitThread@ha
/* 8002EB48 0002AAC8  38 03 EB CC */	addi r0, r3, OSExitThread@l
/* 8002EB4C 0002AACC  90 1F 00 84 */	stw r0, 0x84(r31)
/* 8002EB50 0002AAD0  3C 60 DE AE */	lis r3, 0xDEADBABE@ha
/* 8002EB54 0002AAD4  7C 9E E8 50 */	subf r4, r30, r29
/* 8002EB58 0002AAD8  93 9F 00 0C */	stw r28, 0xc(r31)
/* 8002EB5C 0002AADC  38 03 BA BE */	addi r0, r3, 0xDEADBABE@l
/* 8002EB60 0002AAE0  93 BF 03 04 */	stw r29, 0x304(r31)
/* 8002EB64 0002AAE4  90 9F 03 08 */	stw r4, 0x308(r31)
/* 8002EB68 0002AAE8  80 7F 03 08 */	lwz r3, 0x308(r31)
/* 8002EB6C 0002AAEC  90 03 00 00 */	stw r0, 0x0(r3)
/* 8002EB70 0002AAF0  4B FF C4 75 */	bl OSDisableInterrupts
/* 8002EB74 0002AAF4  3C 80 80 00 */	lis r4, 0x800000DC@ha
/* 8002EB78 0002AAF8  38 A4 00 DC */	addi r5, r4, 0x800000DC@l
/* 8002EB7C 0002AAFC  84 C5 00 04 */	lwzu r6, 0x4(r5)
/* 8002EB80 0002AB00  28 06 00 00 */	cmplwi r6, 0x0
/* 8002EB84 0002AB04  40 82 00 0C */	bne .L_8002EB90
/* 8002EB88 0002AB08  93 E4 00 DC */	stw r31, 0xdc(r4)
/* 8002EB8C 0002AB0C  48 00 00 08 */	b .L_8002EB94
.L_8002EB90:
/* 8002EB90 0002AB10  93 E6 02 FC */	stw r31, 0x2fc(r6)
.L_8002EB94:
/* 8002EB94 0002AB14  90 DF 03 00 */	stw r6, 0x300(r31)
/* 8002EB98 0002AB18  38 00 00 00 */	li r0, 0x0
/* 8002EB9C 0002AB1C  90 1F 02 FC */	stw r0, 0x2fc(r31)
/* 8002EBA0 0002AB20  93 E5 00 00 */	stw r31, 0x0(r5)
/* 8002EBA4 0002AB24  4B FF C4 69 */	bl OSRestoreInterrupts
/* 8002EBA8 0002AB28  38 60 00 01 */	li r3, 0x1
.L_8002EBAC:
/* 8002EBAC 0002AB2C  80 01 00 3C */	lwz r0, 0x3c(r1)
/* 8002EBB0 0002AB30  83 E1 00 34 */	lwz r31, 0x34(r1)
/* 8002EBB4 0002AB34  83 C1 00 30 */	lwz r30, 0x30(r1)
/* 8002EBB8 0002AB38  7C 08 03 A6 */	mtlr r0
/* 8002EBBC 0002AB3C  83 A1 00 2C */	lwz r29, 0x2c(r1)
/* 8002EBC0 0002AB40  83 81 00 28 */	lwz r28, 0x28(r1)
/* 8002EBC4 0002AB44  38 21 00 38 */	addi r1, r1, 0x38
/* 8002EBC8 0002AB48  4E 80 00 20 */	blr
.endfn OSCreateThread

.fn OSExitThread, global
/* 8002EBCC 0002AB4C  7C 08 02 A6 */	mflr r0
/* 8002EBD0 0002AB50  90 01 00 04 */	stw r0, 0x4(r1)
/* 8002EBD4 0002AB54  94 21 FF E0 */	stwu r1, -0x20(r1)
/* 8002EBD8 0002AB58  93 E1 00 1C */	stw r31, 0x1c(r1)
/* 8002EBDC 0002AB5C  93 C1 00 18 */	stw r30, 0x18(r1)
/* 8002EBE0 0002AB60  93 A1 00 14 */	stw r29, 0x14(r1)
/* 8002EBE4 0002AB64  93 81 00 10 */	stw r28, 0x10(r1)
/* 8002EBE8 0002AB68  7C 7C 1B 78 */	mr r28, r3
/* 8002EBEC 0002AB6C  4B FF C3 F9 */	bl OSDisableInterrupts
/* 8002EBF0 0002AB70  3F E0 80 00 */	lis r31, 0x800000E4@ha
/* 8002EBF4 0002AB74  83 DF 00 E4 */	lwz r30, 0x800000E4@l(r31)
/* 8002EBF8 0002AB78  3B A3 00 00 */	addi r29, r3, 0x0
/* 8002EBFC 0002AB7C  38 7E 00 00 */	addi r3, r30, 0x0
/* 8002EC00 0002AB80  4B FF AB 91 */	bl OSClearContext
/* 8002EC04 0002AB84  A0 1E 02 CA */	lhz r0, 0x2ca(r30)
/* 8002EC08 0002AB88  54 00 07 FF */	clrlwi. r0, r0, 31
/* 8002EC0C 0002AB8C  41 82 00 44 */	beq .L_8002EC50
/* 8002EC10 0002AB90  80 9E 02 FC */	lwz r4, 0x2fc(r30)
/* 8002EC14 0002AB94  80 BE 03 00 */	lwz r5, 0x300(r30)
/* 8002EC18 0002AB98  28 04 00 00 */	cmplwi r4, 0x0
/* 8002EC1C 0002AB9C  40 82 00 0C */	bne .L_8002EC28
/* 8002EC20 0002ABA0  90 BF 00 E0 */	stw r5, 0xe0(r31)
/* 8002EC24 0002ABA4  48 00 00 08 */	b .L_8002EC2C
.L_8002EC28:
/* 8002EC28 0002ABA8  90 A4 03 00 */	stw r5, 0x300(r4)
.L_8002EC2C:
/* 8002EC2C 0002ABAC  28 05 00 00 */	cmplwi r5, 0x0
/* 8002EC30 0002ABB0  40 82 00 10 */	bne .L_8002EC40
/* 8002EC34 0002ABB4  3C 60 80 00 */	lis r3, 0x800000DC@ha
/* 8002EC38 0002ABB8  90 83 00 DC */	stw r4, 0x800000DC@l(r3)
/* 8002EC3C 0002ABBC  48 00 00 08 */	b .L_8002EC44
.L_8002EC40:
/* 8002EC40 0002ABC0  90 85 02 FC */	stw r4, 0x2fc(r5)
.L_8002EC44:
/* 8002EC44 0002ABC4  38 00 00 00 */	li r0, 0x0
/* 8002EC48 0002ABC8  B0 1E 02 C8 */	sth r0, 0x2c8(r30)
/* 8002EC4C 0002ABCC  48 00 00 10 */	b .L_8002EC5C
.L_8002EC50:
/* 8002EC50 0002ABD0  38 00 00 08 */	li r0, 0x8
/* 8002EC54 0002ABD4  B0 1E 02 C8 */	sth r0, 0x2c8(r30)
/* 8002EC58 0002ABD8  93 9E 02 D8 */	stw r28, 0x2d8(r30)
.L_8002EC5C:
/* 8002EC5C 0002ABDC  7F C3 F3 78 */	mr r3, r30
/* 8002EC60 0002ABE0  4B FF CD 31 */	bl __OSUnlockAllMutex
/* 8002EC64 0002ABE4  38 7E 02 E8 */	addi r3, r30, 0x2e8
/* 8002EC68 0002ABE8  48 00 06 E9 */	bl OSWakeupThread
/* 8002EC6C 0002ABEC  38 00 00 01 */	li r0, 0x1
/* 8002EC70 0002ABF0  90 0D 84 DC */	stw r0, RunQueueHint@sda21(r13)
/* 8002EC74 0002ABF4  80 0D 84 DC */	lwz r0, RunQueueHint@sda21(r13)
/* 8002EC78 0002ABF8  2C 00 00 00 */	cmpwi r0, 0x0
/* 8002EC7C 0002ABFC  41 82 00 0C */	beq .L_8002EC88
/* 8002EC80 0002AC00  38 60 00 00 */	li r3, 0x0
/* 8002EC84 0002AC04  4B FF FB F9 */	bl SelectThread
.L_8002EC88:
/* 8002EC88 0002AC08  7F A3 EB 78 */	mr r3, r29
/* 8002EC8C 0002AC0C  4B FF C3 81 */	bl OSRestoreInterrupts
/* 8002EC90 0002AC10  80 01 00 24 */	lwz r0, 0x24(r1)
/* 8002EC94 0002AC14  83 E1 00 1C */	lwz r31, 0x1c(r1)
/* 8002EC98 0002AC18  83 C1 00 18 */	lwz r30, 0x18(r1)
/* 8002EC9C 0002AC1C  7C 08 03 A6 */	mtlr r0
/* 8002ECA0 0002AC20  83 A1 00 14 */	lwz r29, 0x14(r1)
/* 8002ECA4 0002AC24  83 81 00 10 */	lwz r28, 0x10(r1)
/* 8002ECA8 0002AC28  38 21 00 20 */	addi r1, r1, 0x20
/* 8002ECAC 0002AC2C  4E 80 00 20 */	blr
.endfn OSExitThread

.fn OSCancelThread, global
/* 8002ECB0 0002AC30  7C 08 02 A6 */	mflr r0
/* 8002ECB4 0002AC34  90 01 00 04 */	stw r0, 0x4(r1)
/* 8002ECB8 0002AC38  94 21 FF E0 */	stwu r1, -0x20(r1)
/* 8002ECBC 0002AC3C  93 E1 00 1C */	stw r31, 0x1c(r1)
/* 8002ECC0 0002AC40  93 C1 00 18 */	stw r30, 0x18(r1)
/* 8002ECC4 0002AC44  7C 7E 1B 78 */	mr r30, r3
/* 8002ECC8 0002AC48  93 A1 00 14 */	stw r29, 0x14(r1)
/* 8002ECCC 0002AC4C  4B FF C3 19 */	bl OSDisableInterrupts
/* 8002ECD0 0002AC50  A0 1E 02 C8 */	lhz r0, 0x2c8(r30)
/* 8002ECD4 0002AC54  3B E3 00 00 */	addi r31, r3, 0x0
/* 8002ECD8 0002AC58  2C 00 00 03 */	cmpwi r0, 0x3
/* 8002ECDC 0002AC5C  41 82 00 DC */	beq .L_8002EDB8
/* 8002ECE0 0002AC60  40 80 00 14 */	bge .L_8002ECF4
/* 8002ECE4 0002AC64  2C 00 00 01 */	cmpwi r0, 0x1
/* 8002ECE8 0002AC68  41 82 00 18 */	beq .L_8002ED00
/* 8002ECEC 0002AC6C  40 80 00 2C */	bge .L_8002ED18
/* 8002ECF0 0002AC70  48 00 00 C8 */	b .L_8002EDB8
.L_8002ECF4:
/* 8002ECF4 0002AC74  2C 00 00 05 */	cmpwi r0, 0x5
/* 8002ECF8 0002AC78  40 80 00 C0 */	bge .L_8002EDB8
/* 8002ECFC 0002AC7C  48 00 00 28 */	b .L_8002ED24
.L_8002ED00:
/* 8002ED00 0002AC80  80 1E 02 CC */	lwz r0, 0x2cc(r30)
/* 8002ED04 0002AC84  2C 00 00 00 */	cmpwi r0, 0x0
/* 8002ED08 0002AC88  41 81 00 BC */	bgt .L_8002EDC4
/* 8002ED0C 0002AC8C  7F C3 F3 78 */	mr r3, r30
/* 8002ED10 0002AC90  4B FF F9 09 */	bl UnsetRun
/* 8002ED14 0002AC94  48 00 00 B0 */	b .L_8002EDC4
.L_8002ED18:
/* 8002ED18 0002AC98  38 00 00 01 */	li r0, 0x1
/* 8002ED1C 0002AC9C  90 0D 84 DC */	stw r0, RunQueueHint@sda21(r13)
/* 8002ED20 0002ACA0  48 00 00 A4 */	b .L_8002EDC4
.L_8002ED24:
/* 8002ED24 0002ACA4  80 9E 02 E0 */	lwz r4, 0x2e0(r30)
/* 8002ED28 0002ACA8  80 BE 02 E4 */	lwz r5, 0x2e4(r30)
/* 8002ED2C 0002ACAC  28 04 00 00 */	cmplwi r4, 0x0
/* 8002ED30 0002ACB0  40 82 00 10 */	bne .L_8002ED40
/* 8002ED34 0002ACB4  80 7E 02 DC */	lwz r3, 0x2dc(r30)
/* 8002ED38 0002ACB8  90 A3 00 04 */	stw r5, 0x4(r3)
/* 8002ED3C 0002ACBC  48 00 00 08 */	b .L_8002ED44
.L_8002ED40:
/* 8002ED40 0002ACC0  90 A4 02 E4 */	stw r5, 0x2e4(r4)
.L_8002ED44:
/* 8002ED44 0002ACC4  28 05 00 00 */	cmplwi r5, 0x0
/* 8002ED48 0002ACC8  40 82 00 10 */	bne .L_8002ED58
/* 8002ED4C 0002ACCC  80 7E 02 DC */	lwz r3, 0x2dc(r30)
/* 8002ED50 0002ACD0  90 83 00 00 */	stw r4, 0x0(r3)
/* 8002ED54 0002ACD4  48 00 00 08 */	b .L_8002ED5C
.L_8002ED58:
/* 8002ED58 0002ACD8  90 85 02 E0 */	stw r4, 0x2e0(r5)
.L_8002ED5C:
/* 8002ED5C 0002ACDC  38 00 00 00 */	li r0, 0x0
/* 8002ED60 0002ACE0  90 1E 02 DC */	stw r0, 0x2dc(r30)
/* 8002ED64 0002ACE4  80 1E 02 CC */	lwz r0, 0x2cc(r30)
/* 8002ED68 0002ACE8  2C 00 00 00 */	cmpwi r0, 0x0
/* 8002ED6C 0002ACEC  41 81 00 58 */	bgt .L_8002EDC4
/* 8002ED70 0002ACF0  80 7E 02 F0 */	lwz r3, 0x2f0(r30)
/* 8002ED74 0002ACF4  28 03 00 00 */	cmplwi r3, 0x0
/* 8002ED78 0002ACF8  41 82 00 4C */	beq .L_8002EDC4
/* 8002ED7C 0002ACFC  83 A3 00 08 */	lwz r29, 0x8(r3)
.L_8002ED80:
/* 8002ED80 0002AD00  80 1D 02 CC */	lwz r0, 0x2cc(r29)
/* 8002ED84 0002AD04  2C 00 00 00 */	cmpwi r0, 0x0
/* 8002ED88 0002AD08  41 81 00 3C */	bgt .L_8002EDC4
/* 8002ED8C 0002AD0C  7F A3 EB 78 */	mr r3, r29
/* 8002ED90 0002AD10  4B FF F8 F1 */	bl __OSGetEffectivePriority
/* 8002ED94 0002AD14  80 1D 02 D0 */	lwz r0, 0x2d0(r29)
/* 8002ED98 0002AD18  38 83 00 00 */	addi r4, r3, 0x0
/* 8002ED9C 0002AD1C  7C 00 20 00 */	cmpw r0, r4
/* 8002EDA0 0002AD20  41 82 00 24 */	beq .L_8002EDC4
/* 8002EDA4 0002AD24  7F A3 EB 78 */	mr r3, r29
/* 8002EDA8 0002AD28  4B FF F9 15 */	bl SetEffectivePriority
/* 8002EDAC 0002AD2C  7C 7D 1B 79 */	mr. r29, r3
/* 8002EDB0 0002AD30  40 82 FF D0 */	bne .L_8002ED80
/* 8002EDB4 0002AD34  48 00 00 10 */	b .L_8002EDC4
.L_8002EDB8:
/* 8002EDB8 0002AD38  7F E3 FB 78 */	mr r3, r31
/* 8002EDBC 0002AD3C  4B FF C2 51 */	bl OSRestoreInterrupts
/* 8002EDC0 0002AD40  48 00 00 90 */	b .L_8002EE50
.L_8002EDC4:
/* 8002EDC4 0002AD44  7F C3 F3 78 */	mr r3, r30
/* 8002EDC8 0002AD48  4B FF A9 C9 */	bl OSClearContext
/* 8002EDCC 0002AD4C  A0 1E 02 CA */	lhz r0, 0x2ca(r30)
/* 8002EDD0 0002AD50  54 00 07 FF */	clrlwi. r0, r0, 31
/* 8002EDD4 0002AD54  41 82 00 48 */	beq .L_8002EE1C
/* 8002EDD8 0002AD58  80 9E 02 FC */	lwz r4, 0x2fc(r30)
/* 8002EDDC 0002AD5C  80 BE 03 00 */	lwz r5, 0x300(r30)
/* 8002EDE0 0002AD60  28 04 00 00 */	cmplwi r4, 0x0
/* 8002EDE4 0002AD64  40 82 00 10 */	bne .L_8002EDF4
/* 8002EDE8 0002AD68  3C 60 80 00 */	lis r3, 0x800000E0@ha
/* 8002EDEC 0002AD6C  90 A3 00 E0 */	stw r5, 0x800000E0@l(r3)
/* 8002EDF0 0002AD70  48 00 00 08 */	b .L_8002EDF8
.L_8002EDF4:
/* 8002EDF4 0002AD74  90 A4 03 00 */	stw r5, 0x300(r4)
.L_8002EDF8:
/* 8002EDF8 0002AD78  28 05 00 00 */	cmplwi r5, 0x0
/* 8002EDFC 0002AD7C  40 82 00 10 */	bne .L_8002EE0C
/* 8002EE00 0002AD80  3C 60 80 00 */	lis r3, 0x800000DC@ha
/* 8002EE04 0002AD84  90 83 00 DC */	stw r4, 0x800000DC@l(r3)
/* 8002EE08 0002AD88  48 00 00 08 */	b .L_8002EE10
.L_8002EE0C:
/* 8002EE0C 0002AD8C  90 85 02 FC */	stw r4, 0x2fc(r5)
.L_8002EE10:
/* 8002EE10 0002AD90  38 00 00 00 */	li r0, 0x0
/* 8002EE14 0002AD94  B0 1E 02 C8 */	sth r0, 0x2c8(r30)
/* 8002EE18 0002AD98  48 00 00 0C */	b .L_8002EE24
.L_8002EE1C:
/* 8002EE1C 0002AD9C  38 00 00 08 */	li r0, 0x8
/* 8002EE20 0002ADA0  B0 1E 02 C8 */	sth r0, 0x2c8(r30)
.L_8002EE24:
/* 8002EE24 0002ADA4  7F C3 F3 78 */	mr r3, r30
/* 8002EE28 0002ADA8  4B FF CB 69 */	bl __OSUnlockAllMutex
/* 8002EE2C 0002ADAC  38 7E 02 E8 */	addi r3, r30, 0x2e8
/* 8002EE30 0002ADB0  48 00 05 21 */	bl OSWakeupThread
/* 8002EE34 0002ADB4  80 0D 84 DC */	lwz r0, RunQueueHint@sda21(r13)
/* 8002EE38 0002ADB8  2C 00 00 00 */	cmpwi r0, 0x0
/* 8002EE3C 0002ADBC  41 82 00 0C */	beq .L_8002EE48
/* 8002EE40 0002ADC0  38 60 00 00 */	li r3, 0x0
/* 8002EE44 0002ADC4  4B FF FA 39 */	bl SelectThread
.L_8002EE48:
/* 8002EE48 0002ADC8  7F E3 FB 78 */	mr r3, r31
/* 8002EE4C 0002ADCC  4B FF C1 C1 */	bl OSRestoreInterrupts
.L_8002EE50:
/* 8002EE50 0002ADD0  80 01 00 24 */	lwz r0, 0x24(r1)
/* 8002EE54 0002ADD4  83 E1 00 1C */	lwz r31, 0x1c(r1)
/* 8002EE58 0002ADD8  83 C1 00 18 */	lwz r30, 0x18(r1)
/* 8002EE5C 0002ADDC  7C 08 03 A6 */	mtlr r0
/* 8002EE60 0002ADE0  83 A1 00 14 */	lwz r29, 0x14(r1)
/* 8002EE64 0002ADE4  38 21 00 20 */	addi r1, r1, 0x20
/* 8002EE68 0002ADE8  4E 80 00 20 */	blr
.endfn OSCancelThread

.fn OSResumeThread, global
/* 8002EE6C 0002ADEC  7C 08 02 A6 */	mflr r0
/* 8002EE70 0002ADF0  90 01 00 04 */	stw r0, 0x4(r1)
/* 8002EE74 0002ADF4  94 21 FF D8 */	stwu r1, -0x28(r1)
/* 8002EE78 0002ADF8  93 E1 00 24 */	stw r31, 0x24(r1)
/* 8002EE7C 0002ADFC  93 C1 00 20 */	stw r30, 0x20(r1)
/* 8002EE80 0002AE00  93 A1 00 1C */	stw r29, 0x1c(r1)
/* 8002EE84 0002AE04  7C 7D 1B 78 */	mr r29, r3
/* 8002EE88 0002AE08  4B FF C1 5D */	bl OSDisableInterrupts
/* 8002EE8C 0002AE0C  80 9D 02 CC */	lwz r4, 0x2cc(r29)
/* 8002EE90 0002AE10  3B E3 00 00 */	addi r31, r3, 0x0
/* 8002EE94 0002AE14  38 04 FF FF */	addi r0, r4, -0x1
/* 8002EE98 0002AE18  90 1D 02 CC */	stw r0, 0x2cc(r29)
/* 8002EE9C 0002AE1C  7C 9E 23 78 */	mr r30, r4
/* 8002EEA0 0002AE20  80 1D 02 CC */	lwz r0, 0x2cc(r29)
/* 8002EEA4 0002AE24  2C 00 00 00 */	cmpwi r0, 0x0
/* 8002EEA8 0002AE28  40 80 00 10 */	bge .L_8002EEB8
/* 8002EEAC 0002AE2C  38 00 00 00 */	li r0, 0x0
/* 8002EEB0 0002AE30  90 1D 02 CC */	stw r0, 0x2cc(r29)
/* 8002EEB4 0002AE34  48 00 02 18 */	b .L_8002F0CC
.L_8002EEB8:
/* 8002EEB8 0002AE38  40 82 02 14 */	bne .L_8002F0CC
/* 8002EEBC 0002AE3C  A0 1D 02 C8 */	lhz r0, 0x2c8(r29)
/* 8002EEC0 0002AE40  2C 00 00 04 */	cmpwi r0, 0x4
/* 8002EEC4 0002AE44  41 82 00 B8 */	beq .L_8002EF7C
/* 8002EEC8 0002AE48  40 80 01 F0 */	bge .L_8002F0B8
/* 8002EECC 0002AE4C  2C 00 00 01 */	cmpwi r0, 0x1
/* 8002EED0 0002AE50  41 82 00 08 */	beq .L_8002EED8
/* 8002EED4 0002AE54  48 00 01 E4 */	b .L_8002F0B8
.L_8002EED8:
/* 8002EED8 0002AE58  80 1D 02 D4 */	lwz r0, 0x2d4(r29)
/* 8002EEDC 0002AE5C  80 7D 02 F4 */	lwz r3, 0x2f4(r29)
/* 8002EEE0 0002AE60  48 00 00 24 */	b .L_8002EF04
.L_8002EEE4:
/* 8002EEE4 0002AE64  80 83 00 00 */	lwz r4, 0x0(r3)
/* 8002EEE8 0002AE68  28 04 00 00 */	cmplwi r4, 0x0
/* 8002EEEC 0002AE6C  41 82 00 14 */	beq .L_8002EF00
/* 8002EEF0 0002AE70  80 84 02 D0 */	lwz r4, 0x2d0(r4)
/* 8002EEF4 0002AE74  7C 04 00 00 */	cmpw r4, r0
/* 8002EEF8 0002AE78  40 80 00 08 */	bge .L_8002EF00
/* 8002EEFC 0002AE7C  7C 80 23 78 */	mr r0, r4
.L_8002EF00:
/* 8002EF00 0002AE80  80 63 00 10 */	lwz r3, 0x10(r3)
.L_8002EF04:
/* 8002EF04 0002AE84  28 03 00 00 */	cmplwi r3, 0x0
/* 8002EF08 0002AE88  40 82 FF DC */	bne .L_8002EEE4
/* 8002EF0C 0002AE8C  90 1D 02 D0 */	stw r0, 0x2d0(r29)
/* 8002EF10 0002AE90  3C 60 80 08 */	lis r3, RunQueue@ha
/* 8002EF14 0002AE94  38 03 03 28 */	addi r0, r3, RunQueue@l
/* 8002EF18 0002AE98  80 7D 02 D0 */	lwz r3, 0x2d0(r29)
/* 8002EF1C 0002AE9C  54 63 18 38 */	slwi r3, r3, 3
/* 8002EF20 0002AEA0  7C 00 1A 14 */	add r0, r0, r3
/* 8002EF24 0002AEA4  90 1D 02 DC */	stw r0, 0x2dc(r29)
/* 8002EF28 0002AEA8  80 9D 02 DC */	lwz r4, 0x2dc(r29)
/* 8002EF2C 0002AEAC  80 64 00 04 */	lwz r3, 0x4(r4)
/* 8002EF30 0002AEB0  28 03 00 00 */	cmplwi r3, 0x0
/* 8002EF34 0002AEB4  40 82 00 0C */	bne .L_8002EF40
/* 8002EF38 0002AEB8  93 A4 00 00 */	stw r29, 0x0(r4)
/* 8002EF3C 0002AEBC  48 00 00 08 */	b .L_8002EF44
.L_8002EF40:
/* 8002EF40 0002AEC0  93 A3 02 E0 */	stw r29, 0x2e0(r3)
.L_8002EF44:
/* 8002EF44 0002AEC4  90 7D 02 E4 */	stw r3, 0x2e4(r29)
/* 8002EF48 0002AEC8  38 00 00 00 */	li r0, 0x0
/* 8002EF4C 0002AECC  38 60 00 01 */	li r3, 0x1
/* 8002EF50 0002AED0  90 1D 02 E0 */	stw r0, 0x2e0(r29)
/* 8002EF54 0002AED4  80 9D 02 DC */	lwz r4, 0x2dc(r29)
/* 8002EF58 0002AED8  93 A4 00 04 */	stw r29, 0x4(r4)
/* 8002EF5C 0002AEDC  80 1D 02 D0 */	lwz r0, 0x2d0(r29)
/* 8002EF60 0002AEE0  80 8D 84 D8 */	lwz r4, RunQueueBits@sda21(r13)
/* 8002EF64 0002AEE4  20 00 00 1F */	subfic r0, r0, 0x1f
/* 8002EF68 0002AEE8  7C 60 00 30 */	slw r0, r3, r0
/* 8002EF6C 0002AEEC  7C 80 03 78 */	or r0, r4, r0
/* 8002EF70 0002AEF0  90 0D 84 D8 */	stw r0, RunQueueBits@sda21(r13)
/* 8002EF74 0002AEF4  90 6D 84 DC */	stw r3, RunQueueHint@sda21(r13)
/* 8002EF78 0002AEF8  48 00 01 40 */	b .L_8002F0B8
.L_8002EF7C:
/* 8002EF7C 0002AEFC  80 9D 02 E0 */	lwz r4, 0x2e0(r29)
/* 8002EF80 0002AF00  80 BD 02 E4 */	lwz r5, 0x2e4(r29)
/* 8002EF84 0002AF04  28 04 00 00 */	cmplwi r4, 0x0
/* 8002EF88 0002AF08  40 82 00 10 */	bne .L_8002EF98
/* 8002EF8C 0002AF0C  80 7D 02 DC */	lwz r3, 0x2dc(r29)
/* 8002EF90 0002AF10  90 A3 00 04 */	stw r5, 0x4(r3)
/* 8002EF94 0002AF14  48 00 00 08 */	b .L_8002EF9C
.L_8002EF98:
/* 8002EF98 0002AF18  90 A4 02 E4 */	stw r5, 0x2e4(r4)
.L_8002EF9C:
/* 8002EF9C 0002AF1C  28 05 00 00 */	cmplwi r5, 0x0
/* 8002EFA0 0002AF20  40 82 00 10 */	bne .L_8002EFB0
/* 8002EFA4 0002AF24  80 7D 02 DC */	lwz r3, 0x2dc(r29)
/* 8002EFA8 0002AF28  90 83 00 00 */	stw r4, 0x0(r3)
/* 8002EFAC 0002AF2C  48 00 00 08 */	b .L_8002EFB4
.L_8002EFB0:
/* 8002EFB0 0002AF30  90 85 02 E0 */	stw r4, 0x2e0(r5)
.L_8002EFB4:
/* 8002EFB4 0002AF34  80 1D 02 D4 */	lwz r0, 0x2d4(r29)
/* 8002EFB8 0002AF38  80 7D 02 F4 */	lwz r3, 0x2f4(r29)
/* 8002EFBC 0002AF3C  48 00 00 24 */	b .L_8002EFE0
.L_8002EFC0:
/* 8002EFC0 0002AF40  80 83 00 00 */	lwz r4, 0x0(r3)
/* 8002EFC4 0002AF44  28 04 00 00 */	cmplwi r4, 0x0
/* 8002EFC8 0002AF48  41 82 00 14 */	beq .L_8002EFDC
/* 8002EFCC 0002AF4C  80 84 02 D0 */	lwz r4, 0x2d0(r4)
/* 8002EFD0 0002AF50  7C 04 00 00 */	cmpw r4, r0
/* 8002EFD4 0002AF54  40 80 00 08 */	bge .L_8002EFDC
/* 8002EFD8 0002AF58  7C 80 23 78 */	mr r0, r4
.L_8002EFDC:
/* 8002EFDC 0002AF5C  80 63 00 10 */	lwz r3, 0x10(r3)
.L_8002EFE0:
/* 8002EFE0 0002AF60  28 03 00 00 */	cmplwi r3, 0x0
/* 8002EFE4 0002AF64  40 82 FF DC */	bne .L_8002EFC0
/* 8002EFE8 0002AF68  90 1D 02 D0 */	stw r0, 0x2d0(r29)
/* 8002EFEC 0002AF6C  80 9D 02 DC */	lwz r4, 0x2dc(r29)
/* 8002EFF0 0002AF70  80 A4 00 00 */	lwz r5, 0x0(r4)
/* 8002EFF4 0002AF74  48 00 00 08 */	b .L_8002EFFC
.L_8002EFF8:
/* 8002EFF8 0002AF78  80 A5 02 E0 */	lwz r5, 0x2e0(r5)
.L_8002EFFC:
/* 8002EFFC 0002AF7C  28 05 00 00 */	cmplwi r5, 0x0
/* 8002F000 0002AF80  41 82 00 14 */	beq .L_8002F014
/* 8002F004 0002AF84  80 65 02 D0 */	lwz r3, 0x2d0(r5)
/* 8002F008 0002AF88  80 1D 02 D0 */	lwz r0, 0x2d0(r29)
/* 8002F00C 0002AF8C  7C 03 00 00 */	cmpw r3, r0
/* 8002F010 0002AF90  40 81 FF E8 */	ble .L_8002EFF8
.L_8002F014:
/* 8002F014 0002AF94  28 05 00 00 */	cmplwi r5, 0x0
/* 8002F018 0002AF98  40 82 00 34 */	bne .L_8002F04C
/* 8002F01C 0002AF9C  80 64 00 04 */	lwz r3, 0x4(r4)
/* 8002F020 0002AFA0  28 03 00 00 */	cmplwi r3, 0x0
/* 8002F024 0002AFA4  40 82 00 0C */	bne .L_8002F030
/* 8002F028 0002AFA8  93 A4 00 00 */	stw r29, 0x0(r4)
/* 8002F02C 0002AFAC  48 00 00 08 */	b .L_8002F034
.L_8002F030:
/* 8002F030 0002AFB0  93 A3 02 E0 */	stw r29, 0x2e0(r3)
.L_8002F034:
/* 8002F034 0002AFB4  90 7D 02 E4 */	stw r3, 0x2e4(r29)
/* 8002F038 0002AFB8  38 00 00 00 */	li r0, 0x0
/* 8002F03C 0002AFBC  90 1D 02 E0 */	stw r0, 0x2e0(r29)
/* 8002F040 0002AFC0  80 7D 02 DC */	lwz r3, 0x2dc(r29)
/* 8002F044 0002AFC4  93 A3 00 04 */	stw r29, 0x4(r3)
/* 8002F048 0002AFC8  48 00 00 2C */	b .L_8002F074
.L_8002F04C:
/* 8002F04C 0002AFCC  90 BD 02 E0 */	stw r5, 0x2e0(r29)
/* 8002F050 0002AFD0  80 65 02 E4 */	lwz r3, 0x2e4(r5)
/* 8002F054 0002AFD4  93 A5 02 E4 */	stw r29, 0x2e4(r5)
/* 8002F058 0002AFD8  28 03 00 00 */	cmplwi r3, 0x0
/* 8002F05C 0002AFDC  90 7D 02 E4 */	stw r3, 0x2e4(r29)
/* 8002F060 0002AFE0  40 82 00 10 */	bne .L_8002F070
/* 8002F064 0002AFE4  80 7D 02 DC */	lwz r3, 0x2dc(r29)
/* 8002F068 0002AFE8  93 A3 00 00 */	stw r29, 0x0(r3)
/* 8002F06C 0002AFEC  48 00 00 08 */	b .L_8002F074
.L_8002F070:
/* 8002F070 0002AFF0  93 A3 02 E0 */	stw r29, 0x2e0(r3)
.L_8002F074:
/* 8002F074 0002AFF4  80 7D 02 F0 */	lwz r3, 0x2f0(r29)
/* 8002F078 0002AFF8  28 03 00 00 */	cmplwi r3, 0x0
/* 8002F07C 0002AFFC  41 82 00 3C */	beq .L_8002F0B8
/* 8002F080 0002B000  83 A3 00 08 */	lwz r29, 0x8(r3)
.L_8002F084:
/* 8002F084 0002B004  80 1D 02 CC */	lwz r0, 0x2cc(r29)
/* 8002F088 0002B008  2C 00 00 00 */	cmpwi r0, 0x0
/* 8002F08C 0002B00C  41 81 00 2C */	bgt .L_8002F0B8
/* 8002F090 0002B010  7F A3 EB 78 */	mr r3, r29
/* 8002F094 0002B014  4B FF F5 ED */	bl __OSGetEffectivePriority
/* 8002F098 0002B018  80 1D 02 D0 */	lwz r0, 0x2d0(r29)
/* 8002F09C 0002B01C  38 83 00 00 */	addi r4, r3, 0x0
/* 8002F0A0 0002B020  7C 00 20 00 */	cmpw r0, r4
/* 8002F0A4 0002B024  41 82 00 14 */	beq .L_8002F0B8
/* 8002F0A8 0002B028  7F A3 EB 78 */	mr r3, r29
/* 8002F0AC 0002B02C  4B FF F6 11 */	bl SetEffectivePriority
/* 8002F0B0 0002B030  7C 7D 1B 79 */	mr. r29, r3
/* 8002F0B4 0002B034  40 82 FF D0 */	bne .L_8002F084
.L_8002F0B8:
/* 8002F0B8 0002B038  80 0D 84 DC */	lwz r0, RunQueueHint@sda21(r13)
/* 8002F0BC 0002B03C  2C 00 00 00 */	cmpwi r0, 0x0
/* 8002F0C0 0002B040  41 82 00 0C */	beq .L_8002F0CC
/* 8002F0C4 0002B044  38 60 00 00 */	li r3, 0x0
/* 8002F0C8 0002B048  4B FF F7 B5 */	bl SelectThread
.L_8002F0CC:
/* 8002F0CC 0002B04C  7F E3 FB 78 */	mr r3, r31
/* 8002F0D0 0002B050  4B FF BF 3D */	bl OSRestoreInterrupts
/* 8002F0D4 0002B054  80 01 00 2C */	lwz r0, 0x2c(r1)
/* 8002F0D8 0002B058  7F C3 F3 78 */	mr r3, r30
/* 8002F0DC 0002B05C  83 E1 00 24 */	lwz r31, 0x24(r1)
/* 8002F0E0 0002B060  83 C1 00 20 */	lwz r30, 0x20(r1)
/* 8002F0E4 0002B064  7C 08 03 A6 */	mtlr r0
/* 8002F0E8 0002B068  83 A1 00 1C */	lwz r29, 0x1c(r1)
/* 8002F0EC 0002B06C  38 21 00 28 */	addi r1, r1, 0x28
/* 8002F0F0 0002B070  4E 80 00 20 */	blr
.endfn OSResumeThread

.fn OSSuspendThread, global
/* 8002F0F4 0002B074  7C 08 02 A6 */	mflr r0
/* 8002F0F8 0002B078  90 01 00 04 */	stw r0, 0x4(r1)
/* 8002F0FC 0002B07C  94 21 FF E0 */	stwu r1, -0x20(r1)
/* 8002F100 0002B080  93 E1 00 1C */	stw r31, 0x1c(r1)
/* 8002F104 0002B084  93 C1 00 18 */	stw r30, 0x18(r1)
/* 8002F108 0002B088  93 A1 00 14 */	stw r29, 0x14(r1)
/* 8002F10C 0002B08C  7C 7D 1B 78 */	mr r29, r3
/* 8002F110 0002B090  4B FF BE D5 */	bl OSDisableInterrupts
/* 8002F114 0002B094  80 9D 02 CC */	lwz r4, 0x2cc(r29)
/* 8002F118 0002B098  3B E3 00 00 */	addi r31, r3, 0x0
/* 8002F11C 0002B09C  38 04 00 01 */	addi r0, r4, 0x1
/* 8002F120 0002B0A0  7C 9E 23 79 */	mr. r30, r4
/* 8002F124 0002B0A4  90 1D 02 CC */	stw r0, 0x2cc(r29)
/* 8002F128 0002B0A8  40 82 01 14 */	bne .L_8002F23C
/* 8002F12C 0002B0AC  A0 1D 02 C8 */	lhz r0, 0x2c8(r29)
/* 8002F130 0002B0B0  2C 00 00 03 */	cmpwi r0, 0x3
/* 8002F134 0002B0B4  41 82 00 F4 */	beq .L_8002F228
/* 8002F138 0002B0B8  40 80 00 14 */	bge .L_8002F14C
/* 8002F13C 0002B0BC  2C 00 00 01 */	cmpwi r0, 0x1
/* 8002F140 0002B0C0  41 82 00 28 */	beq .L_8002F168
/* 8002F144 0002B0C4  40 80 00 14 */	bge .L_8002F158
/* 8002F148 0002B0C8  48 00 00 E0 */	b .L_8002F228
.L_8002F14C:
/* 8002F14C 0002B0CC  2C 00 00 05 */	cmpwi r0, 0x5
/* 8002F150 0002B0D0  40 80 00 D8 */	bge .L_8002F228
/* 8002F154 0002B0D4  48 00 00 20 */	b .L_8002F174
.L_8002F158:
/* 8002F158 0002B0D8  38 00 00 01 */	li r0, 0x1
/* 8002F15C 0002B0DC  90 0D 84 DC */	stw r0, RunQueueHint@sda21(r13)
/* 8002F160 0002B0E0  B0 1D 02 C8 */	sth r0, 0x2c8(r29)
/* 8002F164 0002B0E4  48 00 00 C4 */	b .L_8002F228
.L_8002F168:
/* 8002F168 0002B0E8  7F A3 EB 78 */	mr r3, r29
/* 8002F16C 0002B0EC  4B FF F4 AD */	bl UnsetRun
/* 8002F170 0002B0F0  48 00 00 B8 */	b .L_8002F228
.L_8002F174:
/* 8002F174 0002B0F4  80 9D 02 E0 */	lwz r4, 0x2e0(r29)
/* 8002F178 0002B0F8  80 BD 02 E4 */	lwz r5, 0x2e4(r29)
/* 8002F17C 0002B0FC  28 04 00 00 */	cmplwi r4, 0x0
/* 8002F180 0002B100  40 82 00 10 */	bne .L_8002F190
/* 8002F184 0002B104  80 7D 02 DC */	lwz r3, 0x2dc(r29)
/* 8002F188 0002B108  90 A3 00 04 */	stw r5, 0x4(r3)
/* 8002F18C 0002B10C  48 00 00 08 */	b .L_8002F194
.L_8002F190:
/* 8002F190 0002B110  90 A4 02 E4 */	stw r5, 0x2e4(r4)
.L_8002F194:
/* 8002F194 0002B114  28 05 00 00 */	cmplwi r5, 0x0
/* 8002F198 0002B118  40 82 00 10 */	bne .L_8002F1A8
/* 8002F19C 0002B11C  80 7D 02 DC */	lwz r3, 0x2dc(r29)
/* 8002F1A0 0002B120  90 83 00 00 */	stw r4, 0x0(r3)
/* 8002F1A4 0002B124  48 00 00 08 */	b .L_8002F1AC
.L_8002F1A8:
/* 8002F1A8 0002B128  90 85 02 E0 */	stw r4, 0x2e0(r5)
.L_8002F1AC:
/* 8002F1AC 0002B12C  38 00 00 20 */	li r0, 0x20
/* 8002F1B0 0002B130  90 1D 02 D0 */	stw r0, 0x2d0(r29)
/* 8002F1B4 0002B134  80 9D 02 DC */	lwz r4, 0x2dc(r29)
/* 8002F1B8 0002B138  80 64 00 04 */	lwz r3, 0x4(r4)
/* 8002F1BC 0002B13C  28 03 00 00 */	cmplwi r3, 0x0
/* 8002F1C0 0002B140  40 82 00 0C */	bne .L_8002F1CC
/* 8002F1C4 0002B144  93 A4 00 00 */	stw r29, 0x0(r4)
/* 8002F1C8 0002B148  48 00 00 08 */	b .L_8002F1D0
.L_8002F1CC:
/* 8002F1CC 0002B14C  93 A3 02 E0 */	stw r29, 0x2e0(r3)
.L_8002F1D0:
/* 8002F1D0 0002B150  90 7D 02 E4 */	stw r3, 0x2e4(r29)
/* 8002F1D4 0002B154  38 00 00 00 */	li r0, 0x0
/* 8002F1D8 0002B158  90 1D 02 E0 */	stw r0, 0x2e0(r29)
/* 8002F1DC 0002B15C  80 7D 02 DC */	lwz r3, 0x2dc(r29)
/* 8002F1E0 0002B160  93 A3 00 04 */	stw r29, 0x4(r3)
/* 8002F1E4 0002B164  80 7D 02 F0 */	lwz r3, 0x2f0(r29)
/* 8002F1E8 0002B168  28 03 00 00 */	cmplwi r3, 0x0
/* 8002F1EC 0002B16C  41 82 00 3C */	beq .L_8002F228
/* 8002F1F0 0002B170  83 A3 00 08 */	lwz r29, 0x8(r3)
.L_8002F1F4:
/* 8002F1F4 0002B174  80 1D 02 CC */	lwz r0, 0x2cc(r29)
/* 8002F1F8 0002B178  2C 00 00 00 */	cmpwi r0, 0x0
/* 8002F1FC 0002B17C  41 81 00 2C */	bgt .L_8002F228
/* 8002F200 0002B180  7F A3 EB 78 */	mr r3, r29
/* 8002F204 0002B184  4B FF F4 7D */	bl __OSGetEffectivePriority
/* 8002F208 0002B188  80 1D 02 D0 */	lwz r0, 0x2d0(r29)
/* 8002F20C 0002B18C  38 83 00 00 */	addi r4, r3, 0x0
/* 8002F210 0002B190  7C 00 20 00 */	cmpw r0, r4
/* 8002F214 0002B194  41 82 00 14 */	beq .L_8002F228
/* 8002F218 0002B198  7F A3 EB 78 */	mr r3, r29
/* 8002F21C 0002B19C  4B FF F4 A1 */	bl SetEffectivePriority
/* 8002F220 0002B1A0  7C 7D 1B 79 */	mr. r29, r3
/* 8002F224 0002B1A4  40 82 FF D0 */	bne .L_8002F1F4
.L_8002F228:
/* 8002F228 0002B1A8  80 0D 84 DC */	lwz r0, RunQueueHint@sda21(r13)
/* 8002F22C 0002B1AC  2C 00 00 00 */	cmpwi r0, 0x0
/* 8002F230 0002B1B0  41 82 00 0C */	beq .L_8002F23C
/* 8002F234 0002B1B4  38 60 00 00 */	li r3, 0x0
/* 8002F238 0002B1B8  4B FF F6 45 */	bl SelectThread
.L_8002F23C:
/* 8002F23C 0002B1BC  7F E3 FB 78 */	mr r3, r31
/* 8002F240 0002B1C0  4B FF BD CD */	bl OSRestoreInterrupts
/* 8002F244 0002B1C4  80 01 00 24 */	lwz r0, 0x24(r1)
/* 8002F248 0002B1C8  7F C3 F3 78 */	mr r3, r30
/* 8002F24C 0002B1CC  83 E1 00 1C */	lwz r31, 0x1c(r1)
/* 8002F250 0002B1D0  83 C1 00 18 */	lwz r30, 0x18(r1)
/* 8002F254 0002B1D4  7C 08 03 A6 */	mtlr r0
/* 8002F258 0002B1D8  83 A1 00 14 */	lwz r29, 0x14(r1)
/* 8002F25C 0002B1DC  38 21 00 20 */	addi r1, r1, 0x20
/* 8002F260 0002B1E0  4E 80 00 20 */	blr
.endfn OSSuspendThread

.fn OSSleepThread, global
/* 8002F264 0002B1E4  7C 08 02 A6 */	mflr r0
/* 8002F268 0002B1E8  90 01 00 04 */	stw r0, 0x4(r1)
/* 8002F26C 0002B1EC  94 21 FF E8 */	stwu r1, -0x18(r1)
/* 8002F270 0002B1F0  93 E1 00 14 */	stw r31, 0x14(r1)
/* 8002F274 0002B1F4  93 C1 00 10 */	stw r30, 0x10(r1)
/* 8002F278 0002B1F8  7C 7E 1B 78 */	mr r30, r3
/* 8002F27C 0002B1FC  4B FF BD 69 */	bl OSDisableInterrupts
/* 8002F280 0002B200  3C 80 80 00 */	lis r4, 0x800000E4@ha
/* 8002F284 0002B204  80 84 00 E4 */	lwz r4, 0x800000E4@l(r4)
/* 8002F288 0002B208  38 00 00 04 */	li r0, 0x4
/* 8002F28C 0002B20C  7C 7F 1B 78 */	mr r31, r3
/* 8002F290 0002B210  B0 04 02 C8 */	sth r0, 0x2c8(r4)
/* 8002F294 0002B214  93 C4 02 DC */	stw r30, 0x2dc(r4)
/* 8002F298 0002B218  80 BE 00 00 */	lwz r5, 0x0(r30)
/* 8002F29C 0002B21C  48 00 00 08 */	b .L_8002F2A4
.L_8002F2A0:
/* 8002F2A0 0002B220  80 A5 02 E0 */	lwz r5, 0x2e0(r5)
.L_8002F2A4:
/* 8002F2A4 0002B224  28 05 00 00 */	cmplwi r5, 0x0
/* 8002F2A8 0002B228  41 82 00 14 */	beq .L_8002F2BC
/* 8002F2AC 0002B22C  80 65 02 D0 */	lwz r3, 0x2d0(r5)
/* 8002F2B0 0002B230  80 04 02 D0 */	lwz r0, 0x2d0(r4)
/* 8002F2B4 0002B234  7C 03 00 00 */	cmpw r3, r0
/* 8002F2B8 0002B238  40 81 FF E8 */	ble .L_8002F2A0
.L_8002F2BC:
/* 8002F2BC 0002B23C  28 05 00 00 */	cmplwi r5, 0x0
/* 8002F2C0 0002B240  40 82 00 30 */	bne .L_8002F2F0
/* 8002F2C4 0002B244  80 7E 00 04 */	lwz r3, 0x4(r30)
/* 8002F2C8 0002B248  28 03 00 00 */	cmplwi r3, 0x0
/* 8002F2CC 0002B24C  40 82 00 0C */	bne .L_8002F2D8
/* 8002F2D0 0002B250  90 9E 00 00 */	stw r4, 0x0(r30)
/* 8002F2D4 0002B254  48 00 00 08 */	b .L_8002F2DC
.L_8002F2D8:
/* 8002F2D8 0002B258  90 83 02 E0 */	stw r4, 0x2e0(r3)
.L_8002F2DC:
/* 8002F2DC 0002B25C  90 64 02 E4 */	stw r3, 0x2e4(r4)
/* 8002F2E0 0002B260  38 00 00 00 */	li r0, 0x0
/* 8002F2E4 0002B264  90 04 02 E0 */	stw r0, 0x2e0(r4)
/* 8002F2E8 0002B268  90 9E 00 04 */	stw r4, 0x4(r30)
/* 8002F2EC 0002B26C  48 00 00 28 */	b .L_8002F314
.L_8002F2F0:
/* 8002F2F0 0002B270  90 A4 02 E0 */	stw r5, 0x2e0(r4)
/* 8002F2F4 0002B274  80 65 02 E4 */	lwz r3, 0x2e4(r5)
/* 8002F2F8 0002B278  90 85 02 E4 */	stw r4, 0x2e4(r5)
/* 8002F2FC 0002B27C  28 03 00 00 */	cmplwi r3, 0x0
/* 8002F300 0002B280  90 64 02 E4 */	stw r3, 0x2e4(r4)
/* 8002F304 0002B284  40 82 00 0C */	bne .L_8002F310
/* 8002F308 0002B288  90 9E 00 00 */	stw r4, 0x0(r30)
/* 8002F30C 0002B28C  48 00 00 08 */	b .L_8002F314
.L_8002F310:
/* 8002F310 0002B290  90 83 02 E0 */	stw r4, 0x2e0(r3)
.L_8002F314:
/* 8002F314 0002B294  38 00 00 01 */	li r0, 0x1
/* 8002F318 0002B298  90 0D 84 DC */	stw r0, RunQueueHint@sda21(r13)
/* 8002F31C 0002B29C  80 0D 84 DC */	lwz r0, RunQueueHint@sda21(r13)
/* 8002F320 0002B2A0  2C 00 00 00 */	cmpwi r0, 0x0
/* 8002F324 0002B2A4  41 82 00 0C */	beq .L_8002F330
/* 8002F328 0002B2A8  38 60 00 00 */	li r3, 0x0
/* 8002F32C 0002B2AC  4B FF F5 51 */	bl SelectThread
.L_8002F330:
/* 8002F330 0002B2B0  7F E3 FB 78 */	mr r3, r31
/* 8002F334 0002B2B4  4B FF BC D9 */	bl OSRestoreInterrupts
/* 8002F338 0002B2B8  80 01 00 1C */	lwz r0, 0x1c(r1)
/* 8002F33C 0002B2BC  83 E1 00 14 */	lwz r31, 0x14(r1)
/* 8002F340 0002B2C0  83 C1 00 10 */	lwz r30, 0x10(r1)
/* 8002F344 0002B2C4  7C 08 03 A6 */	mtlr r0
/* 8002F348 0002B2C8  38 21 00 18 */	addi r1, r1, 0x18
/* 8002F34C 0002B2CC  4E 80 00 20 */	blr
.endfn OSSleepThread

.fn OSWakeupThread, global
/* 8002F350 0002B2D0  7C 08 02 A6 */	mflr r0
/* 8002F354 0002B2D4  90 01 00 04 */	stw r0, 0x4(r1)
/* 8002F358 0002B2D8  94 21 FF E8 */	stwu r1, -0x18(r1)
/* 8002F35C 0002B2DC  93 E1 00 14 */	stw r31, 0x14(r1)
/* 8002F360 0002B2E0  93 C1 00 10 */	stw r30, 0x10(r1)
/* 8002F364 0002B2E4  7C 7E 1B 78 */	mr r30, r3
/* 8002F368 0002B2E8  4B FF BC 7D */	bl OSDisableInterrupts
/* 8002F36C 0002B2EC  3C 80 80 08 */	lis r4, RunQueue@ha
/* 8002F370 0002B2F0  3B E3 00 00 */	addi r31, r3, 0x0
/* 8002F374 0002B2F4  38 A4 03 28 */	addi r5, r4, RunQueue@l
/* 8002F378 0002B2F8  48 00 00 9C */	b .L_8002F414
.L_8002F37C:
/* 8002F37C 0002B2FC  80 66 02 E0 */	lwz r3, 0x2e0(r6)
/* 8002F380 0002B300  28 03 00 00 */	cmplwi r3, 0x0
/* 8002F384 0002B304  40 82 00 10 */	bne .L_8002F394
/* 8002F388 0002B308  38 00 00 00 */	li r0, 0x0
/* 8002F38C 0002B30C  90 1E 00 04 */	stw r0, 0x4(r30)
/* 8002F390 0002B310  48 00 00 0C */	b .L_8002F39C
.L_8002F394:
/* 8002F394 0002B314  38 00 00 00 */	li r0, 0x0
/* 8002F398 0002B318  90 03 02 E4 */	stw r0, 0x2e4(r3)
.L_8002F39C:
/* 8002F39C 0002B31C  90 7E 00 00 */	stw r3, 0x0(r30)
/* 8002F3A0 0002B320  38 00 00 01 */	li r0, 0x1
/* 8002F3A4 0002B324  B0 06 02 C8 */	sth r0, 0x2c8(r6)
/* 8002F3A8 0002B328  80 06 02 CC */	lwz r0, 0x2cc(r6)
/* 8002F3AC 0002B32C  2C 00 00 00 */	cmpwi r0, 0x0
/* 8002F3B0 0002B330  41 81 00 64 */	bgt .L_8002F414
/* 8002F3B4 0002B334  80 06 02 D0 */	lwz r0, 0x2d0(r6)
/* 8002F3B8 0002B338  54 00 18 38 */	slwi r0, r0, 3
/* 8002F3BC 0002B33C  7C 05 02 14 */	add r0, r5, r0
/* 8002F3C0 0002B340  90 06 02 DC */	stw r0, 0x2dc(r6)
/* 8002F3C4 0002B344  80 86 02 DC */	lwz r4, 0x2dc(r6)
/* 8002F3C8 0002B348  80 64 00 04 */	lwz r3, 0x4(r4)
/* 8002F3CC 0002B34C  28 03 00 00 */	cmplwi r3, 0x0
/* 8002F3D0 0002B350  40 82 00 0C */	bne .L_8002F3DC
/* 8002F3D4 0002B354  90 C4 00 00 */	stw r6, 0x0(r4)
/* 8002F3D8 0002B358  48 00 00 08 */	b .L_8002F3E0
.L_8002F3DC:
/* 8002F3DC 0002B35C  90 C3 02 E0 */	stw r6, 0x2e0(r3)
.L_8002F3E0:
/* 8002F3E0 0002B360  90 66 02 E4 */	stw r3, 0x2e4(r6)
/* 8002F3E4 0002B364  38 00 00 00 */	li r0, 0x0
/* 8002F3E8 0002B368  38 60 00 01 */	li r3, 0x1
/* 8002F3EC 0002B36C  90 06 02 E0 */	stw r0, 0x2e0(r6)
/* 8002F3F0 0002B370  80 86 02 DC */	lwz r4, 0x2dc(r6)
/* 8002F3F4 0002B374  90 C4 00 04 */	stw r6, 0x4(r4)
/* 8002F3F8 0002B378  80 06 02 D0 */	lwz r0, 0x2d0(r6)
/* 8002F3FC 0002B37C  80 8D 84 D8 */	lwz r4, RunQueueBits@sda21(r13)
/* 8002F400 0002B380  20 00 00 1F */	subfic r0, r0, 0x1f
/* 8002F404 0002B384  7C 60 00 30 */	slw r0, r3, r0
/* 8002F408 0002B388  7C 80 03 78 */	or r0, r4, r0
/* 8002F40C 0002B38C  90 0D 84 D8 */	stw r0, RunQueueBits@sda21(r13)
/* 8002F410 0002B390  90 6D 84 DC */	stw r3, RunQueueHint@sda21(r13)
.L_8002F414:
/* 8002F414 0002B394  80 DE 00 00 */	lwz r6, 0x0(r30)
/* 8002F418 0002B398  28 06 00 00 */	cmplwi r6, 0x0
/* 8002F41C 0002B39C  40 82 FF 60 */	bne .L_8002F37C
/* 8002F420 0002B3A0  80 0D 84 DC */	lwz r0, RunQueueHint@sda21(r13)
/* 8002F424 0002B3A4  2C 00 00 00 */	cmpwi r0, 0x0
/* 8002F428 0002B3A8  41 82 00 0C */	beq .L_8002F434
/* 8002F42C 0002B3AC  38 60 00 00 */	li r3, 0x0
/* 8002F430 0002B3B0  4B FF F4 4D */	bl SelectThread
.L_8002F434:
/* 8002F434 0002B3B4  7F E3 FB 78 */	mr r3, r31
/* 8002F438 0002B3B8  4B FF BB D5 */	bl OSRestoreInterrupts
/* 8002F43C 0002B3BC  80 01 00 1C */	lwz r0, 0x1c(r1)
/* 8002F440 0002B3C0  83 E1 00 14 */	lwz r31, 0x14(r1)
/* 8002F444 0002B3C4  83 C1 00 10 */	lwz r30, 0x10(r1)
/* 8002F448 0002B3C8  7C 08 03 A6 */	mtlr r0
/* 8002F44C 0002B3CC  38 21 00 18 */	addi r1, r1, 0x18
/* 8002F450 0002B3D0  4E 80 00 20 */	blr
.endfn OSWakeupThread

.fn OSSetThreadPriority, global
/* 8002F454 0002B3D4  7C 08 02 A6 */	mflr r0
/* 8002F458 0002B3D8  90 01 00 04 */	stw r0, 0x4(r1)
/* 8002F45C 0002B3DC  94 21 FF E0 */	stwu r1, -0x20(r1)
/* 8002F460 0002B3E0  93 E1 00 1C */	stw r31, 0x1c(r1)
/* 8002F464 0002B3E4  7C 9F 23 79 */	mr. r31, r4
/* 8002F468 0002B3E8  93 C1 00 18 */	stw r30, 0x18(r1)
/* 8002F46C 0002B3EC  93 A1 00 14 */	stw r29, 0x14(r1)
/* 8002F470 0002B3F0  3B A3 00 00 */	addi r29, r3, 0x0
/* 8002F474 0002B3F4  41 80 00 0C */	blt .L_8002F480
/* 8002F478 0002B3F8  2C 1F 00 1F */	cmpwi r31, 0x1f
/* 8002F47C 0002B3FC  40 81 00 0C */	ble .L_8002F488
.L_8002F480:
/* 8002F480 0002B400  38 60 00 00 */	li r3, 0x0
/* 8002F484 0002B404  48 00 00 74 */	b .L_8002F4F8
.L_8002F488:
/* 8002F488 0002B408  4B FF BB 5D */	bl OSDisableInterrupts
/* 8002F48C 0002B40C  80 1D 02 D4 */	lwz r0, 0x2d4(r29)
/* 8002F490 0002B410  3B C3 00 00 */	addi r30, r3, 0x0
/* 8002F494 0002B414  7C 00 F8 00 */	cmpw r0, r31
/* 8002F498 0002B418  41 82 00 54 */	beq .L_8002F4EC
/* 8002F49C 0002B41C  93 FD 02 D4 */	stw r31, 0x2d4(r29)
/* 8002F4A0 0002B420  7F BF EB 78 */	mr r31, r29
.L_8002F4A4:
/* 8002F4A4 0002B424  80 1F 02 CC */	lwz r0, 0x2cc(r31)
/* 8002F4A8 0002B428  2C 00 00 00 */	cmpwi r0, 0x0
/* 8002F4AC 0002B42C  41 81 00 2C */	bgt .L_8002F4D8
/* 8002F4B0 0002B430  7F E3 FB 78 */	mr r3, r31
/* 8002F4B4 0002B434  4B FF F1 CD */	bl __OSGetEffectivePriority
/* 8002F4B8 0002B438  80 1F 02 D0 */	lwz r0, 0x2d0(r31)
/* 8002F4BC 0002B43C  38 83 00 00 */	addi r4, r3, 0x0
/* 8002F4C0 0002B440  7C 00 20 00 */	cmpw r0, r4
/* 8002F4C4 0002B444  41 82 00 14 */	beq .L_8002F4D8
/* 8002F4C8 0002B448  7F E3 FB 78 */	mr r3, r31
/* 8002F4CC 0002B44C  4B FF F1 F1 */	bl SetEffectivePriority
/* 8002F4D0 0002B450  7C 7F 1B 79 */	mr. r31, r3
/* 8002F4D4 0002B454  40 82 FF D0 */	bne .L_8002F4A4
.L_8002F4D8:
/* 8002F4D8 0002B458  80 0D 84 DC */	lwz r0, RunQueueHint@sda21(r13)
/* 8002F4DC 0002B45C  2C 00 00 00 */	cmpwi r0, 0x0
/* 8002F4E0 0002B460  41 82 00 0C */	beq .L_8002F4EC
/* 8002F4E4 0002B464  38 60 00 00 */	li r3, 0x0
/* 8002F4E8 0002B468  4B FF F3 95 */	bl SelectThread
.L_8002F4EC:
/* 8002F4EC 0002B46C  7F C3 F3 78 */	mr r3, r30
/* 8002F4F0 0002B470  4B FF BB 1D */	bl OSRestoreInterrupts
/* 8002F4F4 0002B474  38 60 00 01 */	li r3, 0x1
.L_8002F4F8:
/* 8002F4F8 0002B478  80 01 00 24 */	lwz r0, 0x24(r1)
/* 8002F4FC 0002B47C  83 E1 00 1C */	lwz r31, 0x1c(r1)
/* 8002F500 0002B480  83 C1 00 18 */	lwz r30, 0x18(r1)
/* 8002F504 0002B484  7C 08 03 A6 */	mtlr r0
/* 8002F508 0002B488  83 A1 00 14 */	lwz r29, 0x14(r1)
/* 8002F50C 0002B48C  38 21 00 20 */	addi r1, r1, 0x20
/* 8002F510 0002B490  4E 80 00 20 */	blr
.endfn OSSetThreadPriority

.fn OSGetThreadPriority, global
/* 8002F514 0002B494  80 63 02 D4 */	lwz r3, 0x2d4(r3)
/* 8002F518 0002B498  4E 80 00 20 */	blr
.endfn OSGetThreadPriority

.section .bss, "", @nobits  # 0x8006D1C0 - 0x800A8A80

.balign 8

.obj RunQueue, local
	.skip 0x100
.endobj RunQueue

.obj IdleThread, local
	.skip 0x310
.endobj IdleThread

.obj DefaultThread, local
	.skip 0x310
.endobj DefaultThread

.obj IdleContext, local
	.skip 0x2C8
.endobj IdleContext

.section .sbss, "", @nobits  # 0x800A8DC0 - 0x800A9380

.balign 8

.obj RunQueueBits, local
	.skip 0x4
.endobj RunQueueBits

.obj RunQueueHint, local
	.skip 0x4
.endobj RunQueueHint

.obj Reschedule, local
	.skip 0x4
.endobj Reschedule

.skip 4
